[
    {
        "id": 910533168,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "6\u00a0minutes",
        "timestamp": 1678157282,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "145 ms",
        "url": "/submissions/detail/910533168/",
        "is_pending": "Not Pending",
        "title": "Remove Duplicates from Sorted Array",
        "memory": "15.5 MB",
        "code": "class Solution:\n    def removeDuplicates(self, nums: List[int]) -> int:\n        i = 1\n        while i < len(nums):\n            if nums[i] == nums[i-1]:\n                nums.pop(i)\n            else:\n                i += 1\n            # print(i,nums)\n        return len(nums)",
        "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "remove-duplicates-from-sorted-array",
        "has_notes": false
    },
    {
        "id": 910531708,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "10\u00a0minutes",
        "timestamp": 1678157084,
        "status": 13,
        "status_display": "Output Limit Exceeded",
        "runtime": "N/A",
        "url": "/submissions/detail/910531708/",
        "is_pending": "Not Pending",
        "title": "Remove Duplicates from Sorted Array",
        "memory": "N/A",
        "code": "class Solution:\n    def removeDuplicates(self, nums: List[int]) -> int:\n        i = 1\n        while i < len(nums):\n            if nums[i] == nums[i-1]:\n                del nums[i]\n            else:\n                i += 1\n            print(i,nums)\n        return len(nums)",
        "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110",
        "title_slug": "remove-duplicates-from-sorted-array",
        "has_notes": false
    },
    {
        "id": 910527815,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "19\u00a0minutes",
        "timestamp": 1678156514,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "89 ms",
        "url": "/submissions/detail/910527815/",
        "is_pending": "Not Pending",
        "title": "Smallest Index With Equal Value",
        "memory": "13.8 MB",
        "code": "class Solution:\n    def smallestEqual(self, nums: List[int]) -> int:\n\n        for i in range(len(nums)):\n            if i % 10 == nums[i]:\n                return i\n        return -1",
        "compare_result
        "title_slug": "smallest-index-with-equal-value",
        "has_notes": false
    },
    {
        "id": 910526758,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "22\u00a0minutes",
        "timestamp": 1678156361,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "34 ms",
        "url": "/submissions/detail/910526758/",
        "is_pending": "Not Pending",
        "title": "Minimum Cost to Move Chips to The Same Position",
        "memory": "13.8 MB",
        "code": "class Solution:\n    def minCostToMoveChips(self, position: List[int]) -> int:\n\n        oddEven = []\n        for i in range(len(position)):\n            if position[i] % 2:\n                oddEven.append(0)\n            else:\n                oddEven.append(1)\n        \n        return min(sum(oddEven), len(oddEven) - sum(oddEven))",
        "compare_result": "111111111111111111111111111111111111111111111111111",
        "title_slug": "minimum-cost-to-move-chips-to-the-same-position",
        "has_notes": false
    },
    {
        "id": 910523161,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "31\u00a0minutes",
        "timestamp": 1678155806,
        "status": 15,
        "status_display": "Runtime Error",
        "runtime": "N/A",
        "url": "/submissions/detail/910523161/",
        "is_pending": "Not Pending",
        "title": "Kth Distinct String in an Array",
        "memory": "N/A",
        "code": "class Solution:\n    def kthDistinct(self, arr: List[str], k: int) -> str:\n\n        out = \"\"\n        deleted = {}\n        cleanArr = []\n\n        for char in arr:\n            if char in deleted:\n                deleted[char] += 1\n                cleanArr.remove(char)\n            else:\n                deleted[char] = 1\n                cleanArr.append(char)\n            print(cleanArr)\n\n        for i in range(len(cleanArr)):\n            if i+1 == k:\n                return cleanArr[i]\n        \n        return \"\"",
        "compare_result": "111111111111111111111111111110000000000000000000000000000000000000",
        "title_slug": "kth-distinct-string-in-an-array",
        "has_notes": false
    },
    {
        "id": 909751343,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "1\u00a0day, 6\u00a0hours",
        "timestamp": 1678046624,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "200 ms",
        "url": "/submissions/detail/909751343/",
        "is_pending": "Not Pending",
        "title": "Squares of a Sorted Array",
        "memory": "16.1 MB",
        "code": "class Solution:\n    def sortedSquares(self, nums: List[int]) -> List[int]:\n        out = []\n        for num in nums:\n            out.append(num*num)\n        out.sort()\n        return out",
        "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "squares-of-a-sorted-array",
        "has_notes": false
    },
    {
        "id": 908707458,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "2\u00a0days, 20\u00a0hours",
        "timestamp": 1677909726,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "91 ms",
        "url": "/submissions/detail/908707458/",
        "is_pending": "Not Pending",
        "title": "Divide Array Into Equal Pairs",
        "memory": "14.1 MB",
        "code": "class Solution:\n    def divideArray(self, nums: List[int]) -> bool:\n        x = {}\n\n        for i in range(len(nums)):\n            if nums[i] in x:\n                x[nums[i]] += 1\n            else:\n                x[nums[i]] = 1\n        \n        for j in x.values():\n            if j %2 != 0:\n                return False\n        \n        return True",
        "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "divide-array-into-equal-pairs",
        "has_notes": false
    },
    {
        "id": 908706760,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "2\u00a0days, 20\u00a0hours",
        "timestamp": 1677909624,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "86 ms",
        "url": "/submissions/detail/908706760/",
        "is_pending": "Not Pending",
        "title": "Divide Array Into Equal Pairs",
        "memory": "14 MB",
        "code": "class Solution:\n    def divideArray(self, nums: List[int]) -> bool:\n        x = {}\n\n        for i in range(len(nums)):\n            if nums[i] in x:\n                x[nums[i]] += 1\n            else:\n                x[nums[i]] = 1\n        \n        t = tuple(x.values())\n        for j in t:\n            if j %2 != 0:\n                return False\n        \n        return True",
        "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "divide-array-into-equal-pairs",
        "has_notes": false
    },
    {
        "id": 908704537,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "2\u00a0days, 21\u00a0hours",
        "timestamp": 1677909280,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "1851 ms",
        "url": "/submissions/detail/908704537/",
        "is_pending": "Not Pending",
        "title": "Minimum Time Visiting All Points",
        "memory": "13.9 MB",
        "code": "class Solution:\n    def minTimeToVisitAllPoints(self, points: List[List[int]]) -> int:\n\n        travel = 0\n        start = points[0]\n        i = 1\n        end = points[i]\n        curr = start\n\n        while curr != end:\n            if end[0] > curr[0]:\n                curr[0] += 1\n            elif end[0] < curr[0]:\n                curr[0] -= 1\n            if end[1] > curr[1]:\n                curr[1] += 1\n            elif end[1] < curr[1]:\n                curr[1] -= 1\n            travel += 1\n\n            if curr == end:\n                if i < len(points) -1 :\n                    i += 1\n                    end = points[i]\n                else:\n                    break\n\n        return travel",
        "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "minimum-time-visiting-all-points",
        "has_notes": false
    },
    {
        "id": 908699791,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "2\u00a0days, 21\u00a0hours",
        "timestamp": 1677908551,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "217 ms",
        "url": "/submissions/detail/908699791/",
        "is_pending": "Not Pending",
        "title": "Decode XORed Array",
        "memory": "15.8 MB",
        "code": "class Solution:\n    def decode(self, encoded: List[int], first: int) -> List[int]:\n        output = [first]\n\n        for i in range(len(encoded)):\n            output.append(encoded[i]^output[-1])\n\n        return output",
        "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "decode-xored-array",
        "has_notes": false
    },
    {
        "id": 908698159,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "2\u00a0days, 21\u00a0hours",
        "timestamp": 1677908285,
        "status": 11,
        "status_display": "Wrong Answer",
        "runtime": "N/A",
        "url": "/submissions/detail/908698159/",
        "is_pending": "Not Pending",
        "title": "Decode XORed Array",
        "memory": "N/A",
        "code": "class Solution:\n    def decode(self, encoded: List[int], first: int) -> List[int]:\n        output = [first]\n\n        for i in range(len(encoded)):\n            output.append(abs(encoded[i]-output[-1]))\n\n        return output",
        "compare_result": "1110000100011100010010000000000000000000000000000000000000000000000000000001",
        "title_slug": "decode-xored-array",
        "has_notes": false
    },
    {
        "id": 908694444,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "2\u00a0days, 21\u00a0hours",
        "timestamp": 1677907675,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "74 ms",
        "url": "/submissions/detail/908694444/",
        "is_pending": "Not Pending",
        "title": "Sum of All Odd Length Subarrays",
        "memory": "13.8 MB",
        "code": "class Solution:\n    def sumOddLengthSubarrays(self, arr: List[int]) -> int:\n        count = 0\n        for i in range(len(arr)):\n            for j in range((len(arr)-1)//2 +1 ):\n                # print(j , 2*j+1, i+ 2*j + 1)\n                if (i+ 2*j + 1) > len(arr):\n                    break\n                count += sum(arr[i:i+ 2*j+1])\n                # print(arr[i:i+ 2*j+1],count)\n        return count",
        "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "sum-of-all-odd-length-subarrays",
        "has_notes": false
    },
    {
        "id": 908064541,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "4\u00a0days",
        "timestamp": 1677811812,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "62 ms",
        "url": "/submissions/detail/908064541/",
        "is_pending": "Not Pending",
        "title": "Count Prefixes of a Given String",
        "memory": "14.2 MB",
        "code": "class Solution:\n    def countPrefixes(self, words: List[str], s: str) -> int:\n        out = 0\n        for word in words:\n            if word == s[:len(word)]:\n                out += 1\n        \n        return out",
        "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "count-prefixes-of-a-given-string",
        "has_notes": false
    },
    {
        "id": 908062494,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "4\u00a0days",
        "timestamp": 1677811479,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "77 ms",
        "url": "/submissions/detail/908062494/",
        "is_pending": "Not Pending",
        "title": "Two Out of Three",
        "memory": "13.8 MB",
        "code": "class Solution:\n    def twoOutOfThree(self, nums1: List[int], nums2: List[int], nums3: List[int]) -> List[int]:\n\n        set1 = set(nums1)\n        set2 = set(nums2)\n        set3 = set(nums3)\n        out = []\n\n        for i in set1:\n            if i in set2:\n                out.append(i)\n                set2.remove(i)\n            elif i in set3:\n                out.append(i)\n                set3.remove(i)\n\n        for i in set2:\n            if i in set3:\n                out.append(i)\n        \n\n        return out",
        "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "two-out-of-three",
        "has_notes": false
    },
    {
        "id": 907466703,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "5\u00a0days",
        "timestamp": 1677724812,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "42 ms",
        "url": "/submissions/detail/907466703/",
        "is_pending": "Not Pending",
        "title": "Unique Number of Occurrences",
        "memory": "13.9 MB",
        "code": "class Solution:\n    def uniqueOccurrences(self, arr: List[int]) -> bool:\n\n        u = {}\n\n        for i in range(len(arr)):\n            if arr[i] in u:\n                u[arr[i]] += 1\n            else:\n                u[arr[i]] = 1\n        o = [*u.values()]\n        \n        return len(set(o)) == len(o)",
        "compare_result": "111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "unique-number-of-occurrences",
        "has_notes": false
    },
    {
        "id": 907463631,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "5\u00a0days",
        "timestamp": 1677724275,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "737 ms",
        "url": "/submissions/detail/907463631/",
        "is_pending": "Not Pending",
        "title": "Replace Elements with Greatest Element on Right Side",
        "memory": "16 MB",
        "code": "class Solution:\n    def replaceElements(self, arr: List[int]) -> List[int]:\n        answer = []\n        k = 0\n        \n        for i in range(len(arr)-1):\n            \n            if i < k:\n                answer.append(tempMax)\n                continue\n            else:\n                tempMax = 0\n            for j in range(i+1, len(arr)):\n                if arr[j] > tempMax:\n                    tempMax = arr[j]\n                    k = j \n            answer.append(tempMax)\n        answer.append(-1)  \n        return answer",
        "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "replace-elements-with-greatest-element-on-right-side",
        "has_notes": false
    },
    {
        "id": 907457191,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "5\u00a0days",
        "timestamp": 1677723118,
        "status": 14,
        "status_display": "Time Limit Exceeded",
        "runtime": "N/A",
        "url": "/submissions/detail/907457191/",
        "is_pending": "Not Pending",
        "title": "Replace Elements with Greatest Element on Right Side",
        "memory": "N/A",
        "code": "class Solution:\n    def replaceElements(self, arr: List[int]) -> List[int]:\n        answer = []\n        for i in range(len(arr)-1):\n            answer.append(max(arr[i+1:]))\n        answer.append(-1)\n\n        return answer",
        "compare_result": "111111111111111111111111111111111111111111111111111111111111111111100000000000000000000000",
        "title_slug": "replace-elements-with-greatest-element-on-right-side",
        "has_notes": false
    },
    {
        "id": 907455616,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "5\u00a0days",
        "timestamp": 1677722836,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "230 ms",
        "url": "/submissions/detail/907455616/",
        "is_pending": "Not Pending",
        "title": "Left and Right Sum Differences",
        "memory": "14.2 MB",
        "code": "class Solution:\n    def leftRigthDifference(self, nums: List[int]) -> List[int]:\n\n        return [abs(sum(nums[:i]) - sum(nums[i+1:])) for i in range(len(nums))]",
        "compare_result": "11111111111111111111111111111111111111111111111111111",
        "title_slug": "left-and-right-sum-differences",
        "has_notes": false
    },
    {
        "id": 906812972,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "6\u00a0days, 1\u00a0hour",
        "timestamp": 1677632891,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "39 ms",
        "url": "/submissions/detail/906812972/",
        "is_pending": "Not Pending",
        "title": "Baseball Game",
        "memory": "14.1 MB",
        "code": "class Solution:\n    def calPoints(self, operations: List[str]) -> int:\n        record = []\n\n        for op in operations:\n            if op.lstrip(\"-\").isdigit():\n                record.append(int(op))\n            elif op == '+':\n                record.append(record[-1] + record[-2])\n            elif op == 'D':\n                record.append(record[-1]*2)\n            elif op == 'C':\n                record.pop()\n        return sum(record)",
        "compare_result": "111111111111111111111111111111111111111",
        "title_slug": "baseball-game",
        "has_notes": false
    },
    {
        "id": 906812726,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "6\u00a0days, 1\u00a0hour",
        "timestamp": 1677632841,
        "status": 11,
        "status_display": "Wrong Answer",
        "runtime": "N/A",
        "url": "/submissions/detail/906812726/",
        "is_pending": "Not Pending",
        "title": "Baseball Game",
        "memory": "N/A",
        "code": "class Solution:\n    def calPoints(self, operations: List[str]) -> int:\n        record = []\n\n        for op in operations:\n            if op.isdigit() or len(op) == 2:\n                record.append(int(op))\n            elif op == '+':\n                record.append(record[-1] + record[-2])\n            elif op == 'D':\n                record.append(record[-1]*2)\n            elif op == 'C':\n                record.pop()\n        return sum(record)",
        "compare_result": "111100000000000000000000000000000000000",
        "title_slug": "baseball-game",
        "has_notes": false
    },
    {
        "id": 906808772,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "6\u00a0days, 1\u00a0hour",
        "timestamp": 1677632103,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "153 ms",
        "url": "/submissions/detail/906808772/",
        "is_pending": "Not Pending",
        "title": "Delete Columns to Make Sorted",
        "memory": "14.5 MB",
        "code": "class Solution:\n    def minDeletionSize(self, strs: List[str]) -> int:\n\n        c = 0\n\n        for i in range(len(strs[0])):\n            for j in range(1, len(strs)):\n                if strs[j][i] < strs[j-1][i]:\n                    c += 1\n                    break\n        return c",
        "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "delete-columns-to-make-sorted",
        "has_notes": false
    },
    {
        "id": 906805726,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "6\u00a0days, 2\u00a0hours",
        "timestamp": 1677631540,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "127 ms",
        "url": "/submissions/detail/906805726/",
        "is_pending": "Not Pending",
        "title": "Count Negative Numbers in a Sorted Matrix",
        "memory": "15 MB",
        "code": "class Solution:\n    def countNegatives(self, grid: List[List[int]]) -> int:\n        c = 0\n        for i in range(len(grid)):\n            for j in range(len(grid[-1-i])):\n                if grid[-1-i][-1-j] >= 0:\n                    break\n                c += 1\n        return c",
        "compare_result": "11111111111111111111111111111111111111111111",
        "title_slug": "count-negative-numbers-in-a-sorted-matrix",
        "has_notes": false
    },
    {
        "id": 906225699,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "1\u00a0week",
        "timestamp": 1677550469,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "54 ms",
        "url": "/submissions/detail/906225699/",
        "is_pending": "Not Pending",
        "title": "Final Prices With a Special Discount in a Shop",
        "memory": "14 MB",
        "code": "class Solution:\n    def finalPrices(self, prices: List[int]) -> List[int]:\n\n        answer = []\n\n        for i in range(len(prices)):\n            d = prices[i] \n            for j in range(i+1,len(prices)):\n                if prices[j] <= prices[i]:\n                    d = prices[i] - prices[j]\n                    break\n            answer.append(d)\n        return answer",
        "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "final-prices-with-a-special-discount-in-a-shop",
        "has_notes": false
    },
    {
        "id": 906222927,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "1\u00a0week",
        "timestamp": 1677549973,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "38 ms",
        "url": "/submissions/detail/906222927/",
        "is_pending": "Not Pending",
        "title": "Number of Students Doing Homework at a Given Time",
        "memory": "13.8 MB",
        "code": "class Solution:\n    def busyStudent(self, startTime: List[int], endTime: List[int], queryTime: int) -> int:\n\n        count = 0\n\n        for i in range(len(startTime)):\n            if startTime[i] <= queryTime and endTime[i] >=queryTime:\n                count += 1\n        return count\n",
        "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "number-of-students-doing-homework-at-a-given-time",
        "has_notes": false
    },
    {
        "id": 906221109,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "1\u00a0week",
        "timestamp": 1677549654,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "128 ms",
        "url": "/submissions/detail/906221109/",
        "is_pending": "Not Pending",
        "title": "Maximum Count of Positive Integer and Negative Integer",
        "memory": "14.2 MB",
        "code": "class Solution:\n    def maximumCount(self, nums: List[int]) -> int:\n\n\n        pos = 0\n        neg = 0\n\n        for i in nums:\n            if i > 0:\n                pos += 1\n            elif i < 0:\n                neg += 1\n        \n        return max(pos,neg)",
        "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "maximum-count-of-positive-integer-and-negative-integer",
        "has_notes": false
    },
    {
        "id": 905592445,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "1\u00a0week, 1\u00a0day",
        "timestamp": 1677455103,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "27 ms",
        "url": "/submissions/detail/905592445/",
        "is_pending": "Not Pending",
        "title": "Maximum Value of a String in an Array",
        "memory": "13.9 MB",
        "code": "class Solution:\n    def maximumValue(self, strs: List[str]) -> int:\n        Max = 0\n        for i in strs:\n            if i.isdigit():\n                if int(i) > Max:\n                    Max = int(i)\n            else:\n                if len(i) > Max:\n                    Max  = len(i)\n\n\n        return Max ",
        "compare_result": "1111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "maximum-value-of-a-string-in-an-array",
        "has_notes": false
    },
    {
        "id": 905589549,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "1\u00a0week, 1\u00a0day",
        "timestamp": 1677454453,
        "status": 11,
        "status_display": "Wrong Answer",
        "runtime": "N/A",
        "url": "/submissions/detail/905589549/",
        "is_pending": "Not Pending",
        "title": "Longest Subsequence With Limited Sum",
        "memory": "N/A",
        "code": "class Solution:\n    def answerQueries(self, nums: List[int], queries: List[int]) -> List[int]:\n        output = []\n        for query in queries:\n            wMax = 0\n            i = 0\n            w = 0\n            while i < len(nums):\n                if i + w >= len(nums):\n                    i += 1\n                    w = 0\n                elif sum(nums[i:i+w+1]) > query:\n                    i += 1\n                    w = 0\n                else:\n                    w += 1\n                    if wMax < w:\n                        wMax = w\n            output.append(wMax)\n        \n        return output\n",
        "compare_result": "110110111111000000000000000000000000000000000000000011000",
        "title_slug": "longest-subsequence-with-limited-sum",
        "has_notes": false
    },
    {
        "id": 905583631,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "1\u00a0week, 1\u00a0day",
        "timestamp": 1677453182,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "68 ms",
        "url": "/submissions/detail/905583631/",
        "is_pending": "Not Pending",
        "title": "Minimum Subsequence in Non-Increasing Order",
        "memory": "13.8 MB",
        "code": "class Solution:\n    def minSubsequence(self, nums: List[int]) -> List[int]:\n        Sum = sum(nums)\n        nums.sort()\n        output = []\n\n        for i in range(len(nums)):\n            if sum(output) <= Sum:\n                Sum -= nums[-1-i]\n                output.append(nums[-1-i])\n            \n            else:\n                return output\n        \n        return output",
        "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "minimum-subsequence-in-non-increasing-order",
        "has_notes": false
    },
    {
        "id": 905582504,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "1\u00a0week, 1\u00a0day",
        "timestamp": 1677452913,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "79 ms",
        "url": "/submissions/detail/905582504/",
        "is_pending": "Not Pending",
        "title": "Minimum Subsequence in Non-Increasing Order",
        "memory": "13.9 MB",
        "code": "class Solution:\n    def minSubsequence(self, nums: List[int]) -> List[int]:\n        tmp = sorted(nums)\n        output = []\n\n        for i in range(len(nums)):\n            if sum(output) <= sum(tmp):\n                output.append(tmp[-1])\n                del tmp[-1]\n            \n            else:\n                return output\n        \n        return output",
        "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "minimum-subsequence-in-non-increasing-order",
        "has_notes": false
    },
    {
        "id": 903884614,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "1\u00a0week, 4\u00a0days",
        "timestamp": 1677206064,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "39 ms",
        "url": "/submissions/detail/903884614/",
        "is_pending": "Not Pending",
        "title": "Make Array Zero by Subtracting Equal Amounts",
        "memory": "14 MB",
        "code": "class Solution:\n    def minimumOperations(self, nums: List[int]) -> int:\n\n        nums.sort()\n        ops = 0\n        z = 0\n        sub = nums[0]\n        while nums[-1] > 0:\n            for i in range(z, len(nums)):\n                if nums[i] == 0:\n                    z = i + 1\n                    sub = nums[z]\n                    continue\n                nums[i] -= sub\n            ops += 1\n\n        return ops\n            \n\n",
        "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "make-array-zero-by-subtracting-equal-amounts",
        "has_notes": false
    },
    {
        "id": 903878046,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "1\u00a0week, 4\u00a0days",
        "timestamp": 1677204924,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "62 ms",
        "url": "/submissions/detail/903878046/",
        "is_pending": "Not Pending",
        "title": "Keep Multiplying Found Values by Two",
        "memory": "14 MB",
        "code": "class Solution:\n    def findFinalValue(self, nums: List[int], original: int) -> int:\n        while original in nums:\n            original *= 2\n        return original",
        "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "keep-multiplying-found-values-by-two",
        "has_notes": false
    },
    {
        "id": 903867825,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "1\u00a0week, 4\u00a0days",
        "timestamp": 1677202993,
        "status": 15,
        "status_display": "Runtime Error",
        "runtime": "N/A",
        "url": "/submissions/detail/903867825/",
        "is_pending": "Not Pending",
        "title": "Maximum Units on a Truck",
        "memory": "N/A",
        "code": "class Solution:\n    def maximumUnits(self, boxTypes: List[List[int]], truckSize: int) -> int:\n\n        size = {}\n        for i in boxTypes:\n",
        "compare_result": "0000000000000000000000000000000000000000000000000000000000000000000000000000",
        "title_slug": "maximum-units-on-a-truck",
        "has_notes": false
    },
    {
        "id": 903265388,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "1\u00a0week, 4\u00a0days",
        "timestamp": 1677121764,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "32 ms",
        "url": "/submissions/detail/903265388/",
        "is_pending": "Not Pending",
        "title": "First Letter to Appear Twice",
        "memory": "13.8 MB",
        "code": "class Solution:\n    def repeatedCharacter(self, s: str) -> str:\n        u = set()\n\n        for i in s:\n            x = len(u)\n            u.add(i)\n            if x == len(u):\n                return i",
        "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "first-letter-to-appear-twice",
        "has_notes": false
    },
    {
        "id": 903263936,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "1\u00a0week, 4\u00a0days",
        "timestamp": 1677121533,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "32 ms",
        "url": "/submissions/detail/903263936/",
        "is_pending": "Not Pending",
        "title": "First Letter to Appear Twice",
        "memory": "13.8 MB",
        "code": "class Solution:\n    def repeatedCharacter(self, s: str) -> str:\n        u = set()\n\n        for i in s:\n            if i in u:\n                return i\n            u.add(i)",
        "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "first-letter-to-appear-twice",
        "has_notes": false
    },
    {
        "id": 903263449,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "1\u00a0week, 4\u00a0days",
        "timestamp": 1677121457,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "37 ms",
        "url": "/submissions/detail/903263449/",
        "is_pending": "Not Pending",
        "title": "First Letter to Appear Twice",
        "memory": "13.8 MB",
        "code": "class Solution:\n    def repeatedCharacter(self, s: str) -> str:\n        u = set()\n\n        for i in s:\n            if i not in u:\n                u.add(i)\n            else:\n                return i",
        "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "first-letter-to-appear-twice",
        "has_notes": false
    },
    {
        "id": 902617515,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "1\u00a0week, 6\u00a0days",
        "timestamp": 1677030137,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "59 ms",
        "url": "/submissions/detail/902617515/",
        "is_pending": "Not Pending",
        "title": "Height Checker",
        "memory": "13.8 MB",
        "code": "class Solution:\n    def heightChecker(self, heights: List[int]) -> int:\n\n        expected = sorted(heights)\n        d = 0\n\n        for i in range(len(heights)):\n            if heights[i] != expected[i]:\n                d += 1\n        \n        return d",
        "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "height-checker",
        "has_notes": false
    },
    {
        "id": 902616096,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "1\u00a0week, 6\u00a0days",
        "timestamp": 1677029888,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "110 ms",
        "url": "/submissions/detail/902616096/",
        "is_pending": "Not Pending",
        "title": "Sort Array By Parity",
        "memory": "14.8 MB",
        "code": "class Solution:\n    def sortArrayByParity(self, nums: List[int]) -> List[int]:\n\n        even = []\n        odd = []\n        for i in nums:\n            if i % 2 == 0:\n                even.append(i)\n            else:\n                odd.append(i)\n        \n        return even + odd",
        "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "sort-array-by-parity",
        "has_notes": false
    },
    {
        "id": 902615703,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "1\u00a0week, 6\u00a0days",
        "timestamp": 1677029819,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "110 ms",
        "url": "/submissions/detail/902615703/",
        "is_pending": "Not Pending",
        "title": "Sort Array By Parity",
        "memory": "14.7 MB",
        "code": "class Solution:\n    def sortArrayByParity(self, nums: List[int]) -> List[int]:\n\n        even = []\n        odd = []\n        for i in nums:\n            if i % 2 == 0:\n                even.append(i)\n            else:\n                odd.append(i)\n        \n        return even + odd",
        "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "sort-array-by-parity",
        "has_notes": false
    },
    {
        "id": 902613544,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "1\u00a0week, 6\u00a0days",
        "timestamp": 1677029453,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "129 ms",
        "url": "/submissions/detail/902613544/",
        "is_pending": "Not Pending",
        "title": "Sort Array By Parity",
        "memory": "14.6 MB",
        "code": "class Solution:\n    def sortArrayByParity(self, nums: List[int]) -> List[int]:\n\n        output = []\n        for i in nums:\n            if i % 2 == 0:\n                output.insert(0,i)\n            else:\n                output.append(i)\n        \n        return output",
        "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "sort-array-by-parity",
        "has_notes": false
    },
    {
        "id": 902613261,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "1\u00a0week, 6\u00a0days",
        "timestamp": 1677029403,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "121 ms",
        "url": "/submissions/detail/902613261/",
        "is_pending": "Not Pending",
        "title": "Sort Array By Parity",
        "memory": "14.8 MB",
        "code": "class Solution:\n    def sortArrayByParity(self, nums: List[int]) -> List[int]:\n\n        output = []\n        for i in nums:\n            if i % 2 == 0:\n                output.insert(0,i)\n            else:\n                output.append(i)\n        \n        return output",
        "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "sort-array-by-parity",
        "has_notes": false
    },
    {
        "id": 902611146,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "1\u00a0week, 6\u00a0days",
        "timestamp": 1677029017,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "56 ms",
        "url": "/submissions/detail/902611146/",
        "is_pending": "Not Pending",
        "title": "Maximum Product of Two Elements in an Array",
        "memory": "13.9 MB",
        "code": "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        f=s = 0\n\n        for i, val in enumerate(nums):\n            if val> f:\n                s = f\n                f = val\n                continue\n            if val > s:\n                s = val\n        \n        return (f-1)*(s-1)",
        "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "maximum-product-of-two-elements-in-an-array",
        "has_notes": false
    },
    {
        "id": 902017850,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "1\u00a0week, 6\u00a0days",
        "timestamp": 1676955476,
        "status": 15,
        "status_display": "Runtime Error",
        "runtime": "N/A",
        "url": "/submissions/detail/902017850/",
        "is_pending": "Not Pending",
        "title": "Single Element in a Sorted Array",
        "memory": "N/A",
        "code": "class Solution:\n    def singleNonDuplicate(self, nums: List[int]) -> int:\n        l = 0\n        r = len(num) - 1\n\n\n        while l <= r:\n            m = (l+r)//2\n            \n",
        "compare_result": "000000000000000",
        "title_slug": "single-element-in-a-sorted-array",
        "has_notes": false
    },
    {
        "id": 902007685,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "1\u00a0week, 6\u00a0days",
        "timestamp": 1676954297,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "54 ms",
        "url": "/submissions/detail/902007685/",
        "is_pending": "Not Pending",
        "title": "Search Insert Position",
        "memory": "14.8 MB",
        "code": "class Solution:\n    def searchInsert(self, nums: List[int], target: int) -> int:\n        l = 0\n        r = len(nums) - 1\n        m = (r+l)//2\n\n        while l <= r:\n            if target > nums[m]:\n                l = m +1\n            elif target < nums[m]:\n                r = m - 1\n            else:\n                 break\n            m = (r+l)//2\n            \n        if target == nums[m]:\n            return m\n        else:\n            if target > nums[m]:\n                return m + 1\n            else:\n                return max(0, m - 1)\n        ",
        "compare_result": "1111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "search-insert-position",
        "has_notes": false
    },
    {
        "id": 902003748,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "1\u00a0week, 6\u00a0days",
        "timestamp": 1676953827,
        "status": 14,
        "status_display": "Time Limit Exceeded",
        "runtime": "N/A",
        "url": "/submissions/detail/902003748/",
        "is_pending": "Not Pending",
        "title": "Search Insert Position",
        "memory": "N/A",
        "code": "class Solution:\n    def searchInsert(self, nums: List[int], target: int) -> int:\n        l = 0\n        r = len(nums) - 1\n        m = (r+l)//2\n\n        while r != l:\n            if target > nums[m]:\n                l = m +1\n            elif target < nums[m]:\n                r = m - 1\n            else:\n                 break\n            m = (r+l)//2\n            \n        if target == nums[m]:\n            return m\n        else:\n            if target > nums[m]:\n                return m + 1\n            else:\n                return max(0, m - 1)\n        ",
        "compare_result": "1111111000000000000000000000000000000000000000000000000000000000",
        "title_slug": "search-insert-position",
        "has_notes": false
    },
    {
        "id": 900078631,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "2\u00a0weeks, 2\u00a0days",
        "timestamp": 1676689031,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "136 ms",
        "url": "/submissions/detail/900078631/",
        "is_pending": "Not Pending",
        "title": "Merge Similar Items",
        "memory": "14.7 MB",
        "code": "class Solution:\n    def mergeSimilarItems(self, items1: List[List[int]], items2: List[List[int]]) -> List[List[int]]:\n        x = {}\n        ret = []\n        \n        items = items1+items2\n\n        for i in range(len(items)):\n            if items[i][0] not in x:\n                x[items[i][0]] = items[i][1]\n            else:\n                x[items[i][0]] += items[i][1]\n            # print(items[i][0], x)\n           \n        # ret = [list(x) for x in list(x.items())]\n        # ret.sort()\n\n        for j in sorted(x):\n            ret.append([j,x[j]])\n\n        return ret",
        "compare_result": "1111111111111111111111111111111111111111111111111",
        "title_slug": "merge-similar-items",
        "has_notes": false
    },
    {
        "id": 900077298,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "2\u00a0weeks, 3\u00a0days",
        "timestamp": 1676688754,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "147 ms",
        "url": "/submissions/detail/900077298/",
        "is_pending": "Not Pending",
        "title": "Merge Similar Items",
        "memory": "14.6 MB",
        "code": "class Solution:\n    def mergeSimilarItems(self, items1: List[List[int]], items2: List[List[int]]) -> List[List[int]]:\n        x = {}\n        \n        items = items1+items2\n\n        for i in range(len(items)):\n            if items[i][0] not in x:\n                x[items[i][0]] = items[i][1]\n            else:\n                x[items[i][0]] += items[i][1]\n            # print(items[i][0], x)\n           \n        ret = [list(x) for x in list(x.items())]\n        ret.sort()\n\n        return ret",
        "compare_result": "1111111111111111111111111111111111111111111111111",
        "title_slug": "merge-similar-items",
        "has_notes": false
    },
    {
        "id": 900074144,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "2\u00a0weeks, 3\u00a0days",
        "timestamp": 1676688063,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "33 ms",
        "url": "/submissions/detail/900074144/",
        "is_pending": "Not Pending",
        "title": "Check if All Characters Have Equal Number of Occurrences",
        "memory": "13.8 MB",
        "code": "class Solution:\n    def areOccurrencesEqual(self, s: str) -> bool:\n\n        x = {}\n\n        for letter in s:\n            if letter in x:\n                x[letter] += 1\n            else:\n                x[letter] = 1\n            \n        items = list(x.values())\n        return (min(items) == max(items))",
        "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "check-if-all-characters-have-equal-number-of-occurrences",
        "has_notes": false
    },
    {
        "id": 899497782,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "2\u00a0weeks, 3\u00a0days",
        "timestamp": 1676603595,
        "status": 11,
        "status_display": "Wrong Answer",
        "runtime": "N/A",
        "url": "/submissions/detail/899497782/",
        "is_pending": "Not Pending",
        "title": "Merge Similar Items",
        "memory": "N/A",
        "code": "class Solution:\n    def mergeSimilarItems(self, items1: List[List[int]], items2: List[List[int]]) -> List[List[int]]:\n        x = {}\n        \n        items = items1+items2\n\n        for i in range(len(items)):\n            if items[i][0] not in x:\n                x[items[i][0]] = items[i][1]\n            else:\n                x[items[i][0]] += items[i][1]\n            print(items[i][0], x)\n           \n        ret = list(map(list, x.items()))\n\n        return ret",
        "compare_result": "0010000000000001110000000000000000000000000000000",
        "title_slug": "merge-similar-items",
        "has_notes": false
    },
    {
        "id": 899489684,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "2\u00a0weeks, 4\u00a0days",
        "timestamp": 1676602305,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "212 ms",
        "url": "/submissions/detail/899489684/",
        "is_pending": "Not Pending",
        "title": "N-Repeated Element in Size 2N Array",
        "memory": "15.5 MB",
        "code": "class Solution:\n    def repeatedNTimes(self, nums: List[int]) -> int:\n        x = {}\n        for i in range(len(nums)):\n            if nums[i] not in x:\n                x[nums[i]] = 0\n            else:\n                return nums[i]",
        "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "n-repeated-element-in-size-2n-array",
        "has_notes": false
    },
    {
        "id": 897580129,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "2\u00a0weeks, 6\u00a0days",
        "timestamp": 1676344076,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "59 ms",
        "url": "/submissions/detail/897580129/",
        "is_pending": "Not Pending",
        "title": "Destination City",
        "memory": "14 MB",
        "code": "class Solution:\n    def destCity(self, paths: List[List[str]]) -> str:\n\n        outCity = set()\n        destCity = set()\n\n        for comb in paths:\n            outCity.add(comb[0])\n            if comb[1] not in outCity:\n                destCity.add(comb[1])\n            # if comb[1] in outCity and comb[1] in destCity:\n            #     destCity.remove(comb[1])\n        \n\n        for x in destCity:\n            if x not in outCity:\n                return x",
        "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "destination-city",
        "has_notes": false
    },
    {
        "id": 897575183,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "2\u00a0weeks, 6\u00a0days",
        "timestamp": 1676343334,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "39 ms",
        "url": "/submissions/detail/897575183/",
        "is_pending": "Not Pending",
        "title": "Add Binary",
        "memory": "13.8 MB",
        "code": "class Solution:\n    def addBinary(self, a: str, b: str) -> str:\n        ptr = 0\n        rem = 0\n        output = ''\n        while ptr < len(a) or ptr < len(b):\n            curSum = rem\n            if ptr < len(a):\n                curSum += int(a[-1-ptr])\n            if ptr < len(b):\n                curSum += int(b[-1-ptr])   \n            \n            rem = 0\n            if curSum == 0 : \n                output = '0' + output\n            if curSum == 1 : \n                output = '1' + output\n            if curSum == 2:\n                output = '0' + output\n                rem += 1\n            if curSum == 3:\n                output = '1' + output\n                rem += 1\n\n            ptr += 1\n        \n        if rem == 1:\n            output = '1' + output\n        \n        return output",
        "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "add-binary",
        "has_notes": false
    },
    {
        "id": 897574064,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "3\u00a0weeks",
        "timestamp": 1676343161,
        "status": 11,
        "status_display": "Wrong Answer",
        "runtime": "N/A",
        "url": "/submissions/detail/897574064/",
        "is_pending": "Not Pending",
        "title": "Add Binary",
        "memory": "N/A",
        "code": "class Solution:\n    def addBinary(self, a: str, b: str) -> str:\n        ptr = 0\n        rem = 0\n        output = ''\n        while ptr < len(a) or ptr < len(b):\n            curSum = rem\n            if ptr < len(a):\n                curSum += int(a[-1-ptr])\n            if ptr < len(b):\n                curSum += int(b[-1-ptr])   \n            \n            rem = 0\n            if curSum == 0 : \n                output = '0' \n            if curSum == 1 : \n                output = '1' + output\n            if curSum == 2:\n                output = '0' + output\n                rem += 1\n            if curSum == 3:\n                output = '1' + output\n                rem += 1\n\n            ptr += 1\n        \n        if rem == 1:\n            output = '1' + output\n        \n        return output",
        "compare_result": "111111110111011111011101111000110111110011111100111011101111111010111100110011110010110111101111101100110111000011100100000101001000010110111111011011011000011000000001010001100110001011000111010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "title_slug": "add-binary",
        "has_notes": false
    },
    {
        "id": 897572978,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "3\u00a0weeks",
        "timestamp": 1676342998,
        "status": 11,
        "status_display": "Wrong Answer",
        "runtime": "N/A",
        "url": "/submissions/detail/897572978/",
        "is_pending": "Not Pending",
        "title": "Add Binary",
        "memory": "N/A",
        "code": "class Solution:\n    def addBinary(self, a: str, b: str) -> str:\n        ptr = 0\n        rem = 0\n        output = ''\n        while ptr <= len(a) or ptr <= len(b):\n            curSum = rem\n            if ptr < len(a):\n                curSum += int(a[-1-ptr])\n            if ptr < len(b):\n                curSum += int(b[-1-ptr])   \n            \n            rem = 0\n            if curSum == 0 : \n                output = '0' \n            if curSum == 1 : \n                output = '1' + output\n            if curSum == 2:\n                output = '0' + output\n                rem += 1\n            if curSum == 3:\n                output = '1' + output\n                rem += 1\n\n            ptr += 1\n        \n        return output",
        "compare_result": "111001110011011111010100010000110110010000110100101001101000101010111000110001110010110011101000001100110010000010100000000101001000000010001000001000001000011000000000000001100110001000000011000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "title_slug": "add-binary",
        "has_notes": false
    },
    {
        "id": 897569870,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "3\u00a0weeks",
        "timestamp": 1676342505,
        "status": 11,
        "status_display": "Wrong Answer",
        "runtime": "N/A",
        "url": "/submissions/detail/897569870/",
        "is_pending": "Not Pending",
        "title": "Add Binary",
        "memory": "N/A",
        "code": "class Solution:\n    def addBinary(self, a: str, b: str) -> str:\n        ptr = 0\n        rem = 0\n        output = ''\n        while ptr <= len(a) or ptr <= len(b):\n            curSum = rem\n            if ptr < len(a):\n                curSum += int(a[-1-ptr])\n            if ptr < len(b):\n                curSum += int(b[-1-ptr])   \n            \n            rem = 0\n            if curSum == 1 : \n                output = '1' + output\n            if curSum == 2:\n                output = '0' + output\n                rem += 1\n            if curSum == 3:\n                output = '1' + output\n                rem += 1\n\n            ptr += 1\n        \n        return output",
        "compare_result": "110111110111010111011101111000010101110010010100111011101011111000111100010011100010010011100111101000010111000011000100000001001000010100110111000011001000001000000001010001100100001011000001010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "title_slug": "add-binary",
        "has_notes": false
    },
    {
        "id": 897564841,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "3\u00a0weeks",
        "timestamp": 1676341651,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "113 ms",
        "url": "/submissions/detail/897564841/",
        "is_pending": "Not Pending",
        "title": "Sort the People",
        "memory": "14.5 MB",
        "code": "class Solution:\n    def sortPeople(self, names: List[str], heights: List[int]) -> List[str]:\n        qualDict = {}\n        for i in range(len(names)):\n            qualDict[heights[i]] = names[i]\n        \n        heights.sort(reverse=True)\n\n        output = []\n\n        for height in heights:\n            output.append(qualDict[height])\n        \n        return output",
        "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "sort-the-people",
        "has_notes": false
    },
    {
        "id": 897562577,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "3\u00a0weeks",
        "timestamp": 1676341280,
        "status": 15,
        "status_display": "Runtime Error",
        "runtime": "N/A",
        "url": "/submissions/detail/897562577/",
        "is_pending": "Not Pending",
        "title": "Add Binary",
        "memory": "N/A",
        "code": "class Solution:\n    def addBinary(self, a: str, b: str) -> str:\n\n        # aInverted = a[::-1]\n        # bInverted = b[::-1]\n\n        # rem = 0\n        # size = 0\n        # output\n        # if aInverted > bInverted:\n        #     size = aInverted\n        # else:\n        #     size = bInverted\n\n        # for i in range(size):\n        #     int()\n\n        aInt = 0\n        bInt = 0\n\n        for i in a:\n            aInt = aInt*2 + str(i)\n        for j in b:\n            bInt = bInt*2 + str(j)\n        \n        total = aInt +bInt\n        output = ''\n        if total%2 == 1:\n            total -= 1\n            output.insert(0,'1')\n\n        while total > 0:\n            \n",
        "compare_result": "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "title_slug": "add-binary",
        "has_notes": false
    },
    {
        "id": 897327014,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "3\u00a0weeks",
        "timestamp": 1676308487,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "38 ms",
        "url": "/submissions/detail/897327014/",
        "is_pending": "Not Pending",
        "title": "Maximum Number of Pairs in Array",
        "memory": "13.9 MB",
        "code": "class Solution:\n    def numberOfPairs(self, nums: List[int]) -> List[int]:\n\n        singles = [0,0]\n        tracker = {}\n\n        for num in nums:\n            if num not in tracker:\n                tracker[num] = 1\n            else:\n                tracker[num] += 1\n            \n        for num in set(nums):\n                singles[0] += tracker[num]//2\n                singles[1] += tracker[num]%2\n        \n        return singles",
        "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "maximum-number-of-pairs-in-array",
        "has_notes": false
    },
    {
        "id": 896940401,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "3\u00a0weeks",
        "timestamp": 1676264235,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "39 ms",
        "url": "/submissions/detail/896940401/",
        "is_pending": "Not Pending",
        "title": "Find Target Indices After Sorting Array",
        "memory": "13.9 MB",
        "code": "class Solution:\n    def targetIndices(self, nums: List[int], target: int) -> List[int]:\n        output = []\n        nums.sort()\n        if target in nums:\n            for i in range(nums.index(target),len(nums)):\n                if nums[i] != target:\n                    break\n                output.append(i)\n        return output",
        "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "find-target-indices-after-sorting-array",
        "has_notes": false
    },
    {
        "id": 896940004,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "3\u00a0weeks",
        "timestamp": 1676264194,
        "status": 15,
        "status_display": "Runtime Error",
        "runtime": "N/A",
        "url": "/submissions/detail/896940004/",
        "is_pending": "Not Pending",
        "title": "Find Target Indices After Sorting Array",
        "memory": "N/A",
        "code": "class Solution:\n    def targetIndices(self, nums: List[int], target: int) -> List[int]:\n        output = []\n        nums.sort()\n        if nums.index(target):\n            for i in range(nums.index(target),len(nums)):\n                if nums[i] != target:\n                    break\n                output.append(i)\n        return output",
        "compare_result": "111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "title_slug": "find-target-indices-after-sorting-array",
        "has_notes": false
    },
    {
        "id": 896936868,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "3\u00a0weeks",
        "timestamp": 1676263817,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "33 ms",
        "url": "/submissions/detail/896936868/",
        "is_pending": "Not Pending",
        "title": "Count Odd Numbers in an Interval Range",
        "memory": "13.7 MB",
        "code": "class Solution:\n    def countOdds(self, low: int, high: int) -> int:\n\n        return (high%2 or low%2) + (high-low)//2",
        "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "count-odd-numbers-in-an-interval-range",
        "has_notes": false
    },
    {
        "id": 896936056,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "3\u00a0weeks",
        "timestamp": 1676263718,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "35 ms",
        "url": "/submissions/detail/896936056/",
        "is_pending": "Not Pending",
        "title": "Count Odd Numbers in an Interval Range",
        "memory": "13.9 MB",
        "code": "class Solution:\n    def countOdds(self, low: int, high: int) -> int:\n\n        count = (high-low)//2 + low%2 \n\n        if (high-low)%2==1 and low%2==0:\n            count += 1\n\n        return count",
        "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "count-odd-numbers-in-an-interval-range",
        "has_notes": false
    },
    {
        "id": 896934334,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "3\u00a0weeks",
        "timestamp": 1676263507,
        "status": 11,
        "status_display": "Wrong Answer",
        "runtime": "N/A",
        "url": "/submissions/detail/896934334/",
        "is_pending": "Not Pending",
        "title": "Count Odd Numbers in an Interval Range",
        "memory": "N/A",
        "code": "class Solution:\n    def countOdds(self, low: int, high: int) -> int:\n\n        return low%2 + (high-low)//2",
        "compare_result": "111111110111111011001101111111111111110111111111100111000111001110111111011011111111",
        "title_slug": "count-odd-numbers-in-an-interval-range",
        "has_notes": false
    },
    {
        "id": 896931596,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "3\u00a0weeks",
        "timestamp": 1676263167,
        "status": 15,
        "status_display": "Runtime Error",
        "runtime": "N/A",
        "url": "/submissions/detail/896931596/",
        "is_pending": "Not Pending",
        "title": "Find Greatest Common Divisor of Array",
        "memory": "N/A",
        "code": "class Solution:\n    def findGCD(self, nums: List[int]) -> int:\n\n                minNum = min(nums)\n        maxNum = max(nums)\n        greatest = 0\n",
        "compare_result": "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "title_slug": "find-greatest-common-divisor-of-array",
        "has_notes": false
    },
    {
        "id": 896385653,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "3\u00a0weeks, 1\u00a0day",
        "timestamp": 1676183441,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "482 ms",
        "url": "/submissions/detail/896385653/",
        "is_pending": "Not Pending",
        "title": "Sort the Students by Their Kth Score",
        "memory": "20.2 MB",
        "code": "class Solution:\n    def sortTheStudents(self, score: List[List[int]], k: int) -> List[List[int]]:\n        orderedScore = [score[0]]\n\n        for student in score[1:]:\n            for i in range(len(orderedScore)):\n                if student[k] > orderedScore[i][k]:\n                    orderedScore.insert(i,student)\n                    break\n                if i == len(orderedScore)-1 and  student[k] < orderedScore[i][k]:\n                    orderedScore.append(student)\n        \n        return orderedScore",
        "compare_result": "111111111111111111111111111111111",
        "title_slug": "sort-the-students-by-their-kth-score",
        "has_notes": false
    },
    {
        "id": 896136897,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "3\u00a0weeks, 2\u00a0days",
        "timestamp": 1676147799,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "63 ms",
        "url": "/submissions/detail/896136897/",
        "is_pending": "Not Pending",
        "title": "Find Numbers with Even Number of Digits",
        "memory": "13.8 MB",
        "code": "class Solution:\n    def findNumbers(self, nums: List[int]) -> int:\n        import math\n\n        count = 0\n        for num in nums:\n            if math.floor(math.log10(num))%2 == 1:\n                count += 1\n\n        return count",
        "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "find-numbers-with-even-number-of-digits",
        "has_notes": false
    },
    {
        "id": 896136661,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "3\u00a0weeks, 2\u00a0days",
        "timestamp": 1676147765,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "57 ms",
        "url": "/submissions/detail/896136661/",
        "is_pending": "Not Pending",
        "title": "Find Numbers with Even Number of Digits",
        "memory": "14 MB",
        "code": "class Solution:\n    def findNumbers(self, nums: List[int]) -> int:\n\n        count = 0\n        for num in nums:\n            if floor(log10(num))%2 == 1:\n                count += 1\n\n        return count",
        "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "find-numbers-with-even-number-of-digits",
        "has_notes": false
    },
    {
        "id": 896135235,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "3\u00a0weeks, 2\u00a0days",
        "timestamp": 1676147542,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "54 ms",
        "url": "/submissions/detail/896135235/",
        "is_pending": "Not Pending",
        "title": "Find Numbers with Even Number of Digits",
        "memory": "14 MB",
        "code": "class Solution:\n    def findNumbers(self, nums: List[int]) -> int:\n        import math\n\n        return len([x for x in nums if math.floor(math.log10(x))%2 == 1])",
        "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "find-numbers-with-even-number-of-digits",
        "has_notes": false
    },
    {
        "id": 896134481,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "3\u00a0weeks, 2\u00a0days",
        "timestamp": 1676147417,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "41 ms",
        "url": "/submissions/detail/896134481/",
        "is_pending": "Not Pending",
        "title": "Find Numbers with Even Number of Digits",
        "memory": "14 MB",
        "code": "class Solution:\n    def findNumbers(self, nums: List[int]) -> int:\n        import math\n\n        count = 0\n        for num in nums:\n            if math.floor(math.log10(num))%2 == 1:\n                count += 1\n\n        return count",
        "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "find-numbers-with-even-number-of-digits",
        "has_notes": false
    },
    {
        "id": 896125860,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "3\u00a0weeks, 2\u00a0days",
        "timestamp": 1676146115,
        "status": 11,
        "status_display": "Wrong Answer",
        "runtime": "N/A",
        "url": "/submissions/detail/896125860/",
        "is_pending": "Not Pending",
        "title": "Find Numbers with Even Number of Digits",
        "memory": "N/A",
        "code": "class Solution:\n    def findNumbers(self, nums: List[int]) -> int:\n        import math\n\n        count = 0\n        for num in nums:\n            if (math.log(num))//(math.log(10))%2 == 1:\n                count += 1\n\n        return count",
        "compare_result": "111111111111111111001111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "find-numbers-with-even-number-of-digits",
        "has_notes": false
    },
    {
        "id": 896123957,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "3\u00a0weeks, 2\u00a0days",
        "timestamp": 1676145828,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "58 ms",
        "url": "/submissions/detail/896123957/",
        "is_pending": "Not Pending",
        "title": "Find Numbers with Even Number of Digits",
        "memory": "13.9 MB",
        "code": "class Solution:\n    def findNumbers(self, nums: List[int]) -> int:\n        count = 0\n        for num in nums:\n            if len(str(num))%2 == 0:\n                count += 1\n\n        return count",
        "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "find-numbers-with-even-number-of-digits",
        "has_notes": false
    },
    {
        "id": 896122672,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "3\u00a0weeks, 2\u00a0days",
        "timestamp": 1676145642,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "35 ms",
        "url": "/submissions/detail/896122672/",
        "is_pending": "Not Pending",
        "title": "Counting Words With a Given Prefix",
        "memory": "14.1 MB",
        "code": "class Solution:\n    def prefixCount(self, words: List[str], pref: str) -> int:\n        count = 0\n        for word in words:\n            if word[:len(pref)] == pref:\n                count += 1\n        \n        return count",
        "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "counting-words-with-a-given-prefix",
        "has_notes": false
    },
    {
        "id": 895729472,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "3\u00a0weeks, 2\u00a0days",
        "timestamp": 1676093277,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "279 ms",
        "url": "/submissions/detail/895729472/",
        "is_pending": "Not Pending",
        "title": "Array Partition",
        "memory": "16.9 MB",
        "code": "class Solution:\n    def arrayPairSum(self, nums: List[int]) -> int:\n\n\n        nums.sort()\n        total = 0\n\n        for i in range(len(nums)//2):\n            total += nums[i*2]\n        \n\n        return total\n",
        "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "array-partition",
        "has_notes": false
    },
    {
        "id": 895726953,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "3\u00a0weeks, 2\u00a0days",
        "timestamp": 1676092891,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "97 ms",
        "url": "/submissions/detail/895726953/",
        "is_pending": "Not Pending",
        "title": "Find N Unique Integers Sum up to Zero",
        "memory": "14.2 MB",
        "code": "class Solution:\n    def sumZero(self, n: int) -> List[int]:\n\n        output = []\n        for i in range(n//2):\n            output.insert(i,-(n//2)+i)\n            output.insert(i+1,(n//2)-i)\n            print(i, n//2, output)\n        \n        if ((n%2) == 1):\n            output.insert(n//2,0)\n        \n        return output",
        "compare_result": "111111111111111111111111111111111111111111",
        "title_slug": "find-n-unique-integers-sum-up-to-zero",
        "has_notes": false
    },
    {
        "id": 895719013,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "3\u00a0weeks, 2\u00a0days",
        "timestamp": 1676091663,
        "status": 11,
        "status_display": "Wrong Answer",
        "runtime": "N/A",
        "url": "/submissions/detail/895719013/",
        "is_pending": "Not Pending",
        "title": "DI String Match",
        "memory": "N/A",
        "code": "class Solution:\n    def diStringMatch(self, s: str) -> List[int]:\n        output = [0]\n        for i,perm in enumerate(s):\n            if perm == \"I\":\n                output.append(output[i]+1)\n            if perm == \"D\":\n                output.append(output[i]-1)\n        \n        shift = min(output)\n        output = [x + shift for x in output]\n\n        return output",
        "compare_result": "01010100010000000100000000000000010000000000000000000000000000000000000000000000000000000000000",
        "title_slug": "di-string-match",
        "has_notes": false
    },
    {
        "id": 895074341,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "3\u00a0weeks, 4\u00a0days",
        "timestamp": 1675997562,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "134 ms",
        "url": "/submissions/detail/895074341/",
        "is_pending": "Not Pending",
        "title": "Minimum Operations to Make the Array Increasing",
        "memory": "14.7 MB",
        "code": "class Solution:\n    def minOperations(self, nums: List[int]) -> int:\n        total = 0\n        for i in range(1,len(nums)):\n            if nums[i] <= nums[i-1]:\n                total += nums[i-1]+1 - nums[i]\n                nums[i] = nums[i-1]+1\n        \n        return total",
        "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "minimum-operations-to-make-the-array-increasing",
        "has_notes": false
    },
    {
        "id": 895063753,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "3\u00a0weeks, 4\u00a0days",
        "timestamp": 1675995762,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "190 ms",
        "url": "/submissions/detail/895063753/",
        "is_pending": "Not Pending",
        "title": "Number Of Rectangles That Can Form The Largest Square",
        "memory": "14.5 MB",
        "code": "class Solution:\n    def countGoodRectangles(self, rectangles: List[List[int]]) -> int:\n\n        arr = []\n        count = 1\n\n        for rectangle in rectangles:\n            arr.append(min(rectangle))\n\n        arr.sort()\n\n        for i in range(0,len(arr)-1):\n            if arr[-1-i] == arr[-i-2]:\n                count += 1\n            else:\n                break\n        \n\n        return count\n",
        "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "number-of-rectangles-that-can-form-the-largest-square",
        "has_notes": false
    },
    {
        "id": 895061545,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "3\u00a0weeks, 4\u00a0days",
        "timestamp": 1675995350,
        "status": 11,
        "status_display": "Wrong Answer",
        "runtime": "N/A",
        "url": "/submissions/detail/895061545/",
        "is_pending": "Not Pending",
        "title": "Number Of Rectangles That Can Form The Largest Square",
        "memory": "N/A",
        "code": "class Solution:\n    def countGoodRectangles(self, rectangles: List[List[int]]) -> int:\n\n        arr = []\n        count = 1\n\n        for rectangle in rectangles:\n            arr.append(min(rectangle))\n\n        arr.sort()\n\n        for i in range(len(arr)-1):\n            print(arr[-1-i])\n            if arr[-2-i] == arr[-1-i]:\n                count += 1\n        \n\n        return count\n",
        "compare_result": "11000000000000000000000000000000000000000000000000000000000000000011",
        "title_slug": "number-of-rectangles-that-can-form-the-largest-square",
        "has_notes": false
    },
    {
        "id": 895057791,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "3\u00a0weeks, 4\u00a0days",
        "timestamp": 1675994654,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "104 ms",
        "url": "/submissions/detail/895057791/",
        "is_pending": "Not Pending",
        "title": "Find First Palindromic String in the Array",
        "memory": "14.1 MB",
        "code": "class Solution:\n    def firstPalindrome(self, words: List[str]) -> str:\n\n        output = \"\"\n\n        for word in words:\n            for i in range(len(word)//2+1):\n                # print(i,(len(word)//2 - 1), word[i],word[-1-i])\n                if word[i] != word[-1-i]:\n                    break\n                if i == (len(word)//2 ) and word[i] == word[-1-i]:\n                    return word\n        \n        return output\n                ",
        "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "find-first-palindromic-string-in-the-array",
        "has_notes": false
    },
    {
        "id": 895056228,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "3\u00a0weeks, 4\u00a0days",
        "timestamp": 1675994358,
        "status": 11,
        "status_display": "Wrong Answer",
        "runtime": "N/A",
        "url": "/submissions/detail/895056228/",
        "is_pending": "Not Pending",
        "title": "Find First Palindromic String in the Array",
        "memory": "N/A",
        "code": "class Solution:\n    def firstPalindrome(self, words: List[str]) -> str:\n\n        output = \"\"\n\n        for word in words:\n            for i in range(len(word)//2):\n                if word[i] != word[-1-i]:\n                    break\n                if i == (len(word)//2 - 1) and word[i] == word[-1-i]:\n                    return word\n        \n        return output\n                ",
        "compare_result": "11111101111111110110111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "find-first-palindromic-string-in-the-array",
        "has_notes": false
    },
    {
        "id": 894155689,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "3\u00a0weeks, 5\u00a0days",
        "timestamp": 1675874058,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "84 ms",
        "url": "/submissions/detail/894155689/",
        "is_pending": "Not Pending",
        "title": "Separate the Digits in an Array",
        "memory": "14.5 MB",
        "code": "class Solution:\n    def separateDigits(self, nums: List[int]) -> List[int]:\n        output = []\n        ptr = 0\n\n        for i in range(len(nums)):\n            rem = nums[i]\n            digCount = 0\n            while rem >0:\n                output.insert(ptr,rem % 10)\n                rem = rem//10\n                digCount += 1\n            ptr += digCount\n                \n\n        return output",
        "compare_result": "1111111111111111111111111111111111111111111111111111",
        "title_slug": "separate-the-digits-in-an-array",
        "has_notes": false
    },
    {
        "id": 893038531,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "3\u00a0weeks, 6\u00a0days",
        "timestamp": 1675738555,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "5141 ms",
        "url": "/submissions/detail/893038531/",
        "is_pending": "Not Pending",
        "title": "Number of Recent Calls",
        "memory": "19.7 MB",
        "code": "class RecentCounter:\n\n    def __init__(self):\n        self.requests = []\n        \n\n    def ping(self, t: int) -> int:\n        cutOff = t - 3000\n        output = 0\n        self.requests.append(t)\n\n        for i in range(len(self.requests)):\n            # print(output,self.requests)\n            # print(self.requests[-1-i], cutOff)\n            if self.requests[-1-i] < cutOff:\n                self.requests = self.requests[-i:]\n                break\n            output += 1\n\n        return output  \n\n\n# Your RecentCounter object will be instantiated and called as such:\n# obj = RecentCounter()\n# param_1 = obj.ping(t)",
        "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "number-of-recent-calls",
        "has_notes": false
    },
    {
        "id": 893038227,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "4\u00a0weeks",
        "timestamp": 1675738512,
        "status": 15,
        "status_display": "Runtime Error",
        "runtime": "N/A",
        "url": "/submissions/detail/893038227/",
        "is_pending": "Not Pending",
        "title": "Number of Recent Calls",
        "memory": "N/A",
        "code": "class RecentCounter:\n\n    def __init__(self):\n        self.requests = []\n        \n\n    def ping(self, t: int) -> int:\n        cutOff = t - 3000\n        output = 0\n        self.requests.append(t)\n\n        for i in range(len(self.requests)):\n            # print(output,self.requests)\n            # print(self.requests[-1-i], cutOff)\n            if self.requests[-1-i] < cutOff:\n                self.requests = self.requests[-i]\n                break\n            output += 1\n\n        return output  \n\n\n# Your RecentCounter object will be instantiated and called as such:\n# obj = RecentCounter()\n# param_1 = obj.ping(t)",
        "compare_result": "11110000000000000000000000000000000000000000000000000000000000000000",
        "title_slug": "number-of-recent-calls",
        "has_notes": false
    },
    {
        "id": 893037756,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "4\u00a0weeks",
        "timestamp": 1675738443,
        "status": 13,
        "status_display": "Output Limit Exceeded",
        "runtime": "N/A",
        "url": "/submissions/detail/893037756/",
        "is_pending": "Not Pending",
        "title": "Number of Recent Calls",
        "memory": "N/A",
        "code": "class RecentCounter:\n\n    def __init__(self):\n        self.requests = []\n        \n\n    def ping(self, t: int) -> int:\n        cutOff = t - 3000\n        output = 0\n        self.requests.append(t)\n\n        for i in range(len(self.requests)):\n            # print(output,self.requests)\n            print(self.requests[-1-i], cutOff)\n            if self.requests[-1-i] < cutOff:\n                break\n            output += 1\n\n        return output  \n\n\n# Your RecentCounter object will be instantiated and called as such:\n# obj = RecentCounter()\n# param_1 = obj.ping(t)",
        "compare_result": "11111111111111111111111111111111111111111111111111111111000000000000",
        "title_slug": "number-of-recent-calls",
        "has_notes": false
    },
    {
        "id": 893025318,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "4\u00a0weeks",
        "timestamp": 1675736643,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "35 ms",
        "url": "/submissions/detail/893025318/",
        "is_pending": "Not Pending",
        "title": "Number of Students Unable to Eat Lunch",
        "memory": "13.9 MB",
        "code": "class Solution:\n    def countStudents(self, students: List[int], sandwiches: List[int]) -> int:\n\n        rotationCheck = 0\n\n        while rotationCheck != len(students):\n\n            if students[0] == sandwiches[0]:\n                students.pop(0)\n                sandwiches.pop(0)\n                rotationCheck = 0\n            else:\n                students.append(students[0])\n                students.pop(0)\n                rotationCheck += 1\n\n\n        return rotationCheck",
        "compare_result": "1111111111111111111111111111111111111111111111111111111",
        "title_slug": "number-of-students-unable-to-eat-lunch",
        "has_notes": false
    },
    {
        "id": 893017919,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "4\u00a0weeks",
        "timestamp": 1675735477,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "34 ms",
        "url": "/submissions/detail/893017919/",
        "is_pending": "Not Pending",
        "title": "Remove Outermost Parentheses",
        "memory": "13.9 MB",
        "code": "class Solution:\n    def removeOuterParentheses(self, s: str) -> str:\n\n        depth = 0\n        output = \"\"\n        for index,value in enumerate(s):\n\n            if value == \"(\":\n                depth += 1\n            elif value == \")\":\n                depth -=1\n\n            if depth == 1 and value == \"(\" :\n                continue\n            \n            if depth == 0 and value == \")\" :\n                continue\n            \n            output += value\n    \n        return output",
        "compare_result": "11111111111111111111111111111111111111111111111111111111111",
        "title_slug": "remove-outermost-parentheses",
        "has_notes": false
    },
    {
        "id": 893012811,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "4\u00a0weeks",
        "timestamp": 1675734663,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "37 ms",
        "url": "/submissions/detail/893012811/",
        "is_pending": "Not Pending",
        "title": "Maximum Nesting Depth of the Parentheses",
        "memory": "13.9 MB",
        "code": "class Solution:\n    def maxDepth(self, s: str) -> int:\n\n        maxDepth = depth = 0\n\n        for j in range(len(s)):            \n            if s[j] == \"(\":\n                depth += 1\n                maxDepth = max(maxDepth,depth)\n            elif s[j] == \")\":\n                depth -=1\n            \n        \n        return maxDepth",
        "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "maximum-nesting-depth-of-the-parentheses",
        "has_notes": false
    },
    {
        "id": 893011711,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "4\u00a0weeks",
        "timestamp": 1675734488,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "37 ms",
        "url": "/submissions/detail/893011711/",
        "is_pending": "Not Pending",
        "title": "Maximum Nesting Depth of the Parentheses",
        "memory": "13.9 MB",
        "code": "class Solution:\n    def maxDepth(self, s: str) -> int:\n\n        cleanS = \"\"\n        maxDepth = 0\n\n        for i in range(len(s)):\n            if s[i] == \"(\" or s[i] == \")\":\n                cleanS += s[i]\n        \n        depth = 0\n        for j in range(len(cleanS)):            \n            if cleanS[j] == \"(\":\n                depth += 1\n            else:\n                depth -=1\n            if depth > maxDepth:\n                maxDepth = depth\n            \n        \n        return maxDepth",
        "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "maximum-nesting-depth-of-the-parentheses",
        "has_notes": false
    },
    {
        "id": 892367558,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "4\u00a0weeks, 1\u00a0day",
        "timestamp": 1675651913,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "46 ms",
        "url": "/submissions/detail/892367558/",
        "is_pending": "Not Pending",
        "title": "Flipping an Image",
        "memory": "13.8 MB",
        "code": "class Solution:\n    def flipAndInvertImage(self, image: List[List[int]]) -> List[List[int]]:\n\n        result = []\n\n        for i,val in enumerate(image):\n            part = []\n            for j,dig in enumerate(val):\n                # print(val, j,  val[-j])\n                if val[-j-1] == 0:\n                    part.append(1)\n                else:\n                    part.append(0)\n            result.append(part)\n        \n        return result\n                \n",
        "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "flipping-an-image",
        "has_notes": false
    },
    {
        "id": 892362447,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "4\u00a0weeks, 1\u00a0day",
        "timestamp": 1675651107,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "141 ms",
        "url": "/submissions/detail/892362447/",
        "is_pending": "Not Pending",
        "title": "Difference Between Element Sum and Digit Sum of an Array",
        "memory": "14.1 MB",
        "code": "class Solution:\n    def differenceOfSum(self, nums: List[int]) -> int:\n\n        elSum = sum(nums)\n        digSum = 0\n\n        for num in nums:\n            temp = num\n            while temp >0:\n                dig = temp % 10\n                if dig !=0:\n                    temp -= dig\n                    digSum += dig\n                temp = temp // 10\n        \n        return abs(elSum - digSum)",
        "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "difference-between-element-sum-and-digit-sum-of-an-array",
        "has_notes": false
    },
    {
        "id": 889118291,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "1\u00a0month",
        "timestamp": 1675217679,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "57 ms",
        "url": "/submissions/detail/889118291/",
        "is_pending": "Not Pending",
        "title": "Remove Duplicates from Sorted List",
        "memory": "14.1 MB",
        "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\n\n        if not head or head.next == None:\n            return head\n\n\n        traverser = head.next\n        cleanLL = head\n        cleanLLHead = cleanLL\n\n        while traverser != None:\n            print(traverser.val,cleanLL.val)\n            if traverser.val != cleanLL.val:\n                cleanLL.next = traverser\n                cleanLL = cleanLL.next\n            else:\n                cleanLL.next = None\n            \n            traverser = traverser.next\n        \n        return cleanLLHead",
        "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "remove-duplicates-from-sorted-list",
        "has_notes": false
    },
    {
        "id": 889115503,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "1\u00a0month",
        "timestamp": 1675217219,
        "status": 15,
        "status_display": "Runtime Error",
        "runtime": "N/A",
        "url": "/submissions/detail/889115503/",
        "is_pending": "Not Pending",
        "title": "Remove Duplicates from Sorted List",
        "memory": "N/A",
        "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\n\n        traverser = head.next\n        cleanLL = head\n        cleanLLHead = cleanLL\n\n        while traverser != None:\n            if traverser.val != cleanLL.val:\n                cleanLL.next = traverser\n                cleanLL = cleanLL.next\n            else:\n                cleanLL.next = None\n            traverser = traverser.next\n        \n        return cleanLLHead",
        "compare_result": "1100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "title_slug": "remove-duplicates-from-sorted-list",
        "has_notes": false
    },
    {
        "id": 889110505,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "1\u00a0month",
        "timestamp": 1675216337,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "35 ms",
        "url": "/submissions/detail/889110505/",
        "is_pending": "Not Pending",
        "title": "Middle of the Linked List",
        "memory": "13.9 MB",
        "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def middleNode(self, head: Optional[ListNode]) -> Optional[ListNode]:\n\n        midPnt = 0\n        ptr = head\n        while ptr != None:\n            midPnt += 1\n            ptr = ptr.next\n        \n        ptr = head\n        for i in range(midPnt//2):\n            ptr = ptr.next \n        \n        return ptr\n",
        "compare_result": "111111111111111111111111111111111111",
        "title_slug": "middle-of-the-linked-list",
        "has_notes": false
    },
    {
        "id": 889105605,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "1\u00a0month",
        "timestamp": 1675215464,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "30 ms",
        "url": "/submissions/detail/889105605/",
        "is_pending": "Not Pending",
        "title": "Convert Binary Number in a Linked List to Integer",
        "memory": "13.9 MB",
        "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def getDecimalValue(self, head: ListNode) -> int:\n\n        count = 0\n        ptr = head\n\n        while ptr != None:\n            count = (count + ptr.val)*2\n            ptr = ptr.next\n        \n        return count//2",
        "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "convert-binary-number-in-a-linked-list-to-integer",
        "has_notes": true
    },
    {
        "id": 887730732,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "1\u00a0month",
        "timestamp": 1675031933,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "33 ms",
        "url": "/submissions/detail/887730732/",
        "is_pending": "Not Pending",
        "title": "Find the Highest Altitude",
        "memory": "13.8 MB",
        "code": "class Solution:\n    def largestAltitude(self, gain: List[int]) -> int:\n        maxAlt = 0\n        Alt = 0\n        for i in range(len(gain)):\n            Alt += gain[i]\n            maxAlt = max(maxAlt, Alt)\n            \n            \n\n        return maxAlt",
        "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "find-the-highest-altitude",
        "has_notes": false
    },
    {
        "id": 887730225,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "1\u00a0month",
        "timestamp": 1675031848,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "29 ms",
        "url": "/submissions/detail/887730225/",
        "is_pending": "Not Pending",
        "title": "Find the Highest Altitude",
        "memory": "13.9 MB",
        "code": "class Solution:\n    def largestAltitude(self, gain: List[int]) -> int:\n        maxAlt = 0\n        Alt = 0\n        for i in range(len(gain)):\n            Alt += gain[i]\n            if Alt > maxAlt:\n                maxAlt = Alt\n            \n            \n\n        return maxAlt",
        "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "find-the-highest-altitude",
        "has_notes": false
    },
    {
        "id": 887728509,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "1\u00a0month",
        "timestamp": 1675031530,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "43 ms",
        "url": "/submissions/detail/887728509/",
        "is_pending": "Not Pending",
        "title": "Find the Highest Altitude",
        "memory": "13.9 MB",
        "code": "class Solution:\n    def largestAltitude(self, gain: List[int]) -> int:\n        maxAlt = 0\n        Alt = 0\n        for i in range(len(gain)):\n            if Alt + gain[i] > maxAlt:\n                maxAlt = Alt + gain[i]\n            \n            Alt += gain[i]\n\n\n        return maxAlt",
        "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "find-the-highest-altitude",
        "has_notes": false
    },
    {
        "id": 885759818,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "1\u00a0month, 1\u00a0week",
        "timestamp": 1674750399,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "111 ms",
        "url": "/submissions/detail/885759818/",
        "is_pending": "Not Pending",
        "title": "Matrix Diagonal Sum",
        "memory": "14.2 MB",
        "code": "class Solution:\n    def diagonalSum(self, mat: List[List[int]]) -> int:\n        size = len(mat[0])\n        count = 0\n        for i in range(size):\n            count+=mat[i][i] + mat[-i-1][i]\n        \n        if size%2 == 1 :\n            count-=mat[size//2][size//2]\n\n\n        return (count)",
        "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "matrix-diagonal-sum",
        "has_notes": false
    },
    {
        "id": 885757907,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "1\u00a0month, 1\u00a0week",
        "timestamp": 1674750198,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "250 ms",
        "url": "/submissions/detail/885757907/",
        "is_pending": "Not Pending",
        "title": "Matrix Diagonal Sum",
        "memory": "14.1 MB",
        "code": "class Solution:\n    def diagonalSum(self, mat: List[List[int]]) -> int:\n        size = len(mat[0])\n        count = 0\n        for i in range(size):\n            count+=mat[i][i] + mat[-i-1][i]\n        \n        if size%2 == 1 :\n            count-=mat[size//2][size//2]\n\n\n        return (count)",
        "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "matrix-diagonal-sum",
        "has_notes": false
    },
    {
        "id": 885081654,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "1\u00a0month, 1\u00a0week",
        "timestamp": 1674660618,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "101 ms",
        "url": "/submissions/detail/885081654/",
        "is_pending": "Not Pending",
        "title": "Count Equal and Divisible Pairs in an Array",
        "memory": "13.9 MB",
        "code": "class Solution:\n    def countPairs(self, nums: List[int], k: int) -> int:\n        count = 0\n        for i in range(len(nums)-1):\n            for j in range(i+1,len(nums)):\n                if (nums[i] == nums[j] and (i*j)%k == 0):\n                    count +=1\n        \n        return count",
        "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "count-equal-and-divisible-pairs-in-an-array",
        "has_notes": false
    },
    {
        "id": 884418988,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "1\u00a0month, 1\u00a0week",
        "timestamp": 1674572788,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "460 ms",
        "url": "/submissions/detail/884418988/",
        "is_pending": "Not Pending",
        "title": "Count Good Triplets",
        "memory": "14 MB",
        "code": "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        count = 0\n        for i in range(len(arr)-2):\n            for j in range(i+1,len(arr)-1):\n                if (abs(arr[i] - arr[j]) > a):\n                    continue\n                for k in range(j+1,len(arr)):\n                    if ((abs(arr[j] - arr[k]) <= b) and (abs(arr[i] - arr[k]) <= c)):\n                        count+= 1\n        \n        return count",
        "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "count-good-triplets",
        "has_notes": false
    },
    {
        "id": 884415879,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "1\u00a0month, 1\u00a0week",
        "timestamp": 1674572417,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "1735 ms",
        "url": "/submissions/detail/884415879/",
        "is_pending": "Not Pending",
        "title": "Count Good Triplets",
        "memory": "14.1 MB",
        "code": "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        count = 0\n        for i in range(len(arr)):\n            for j in range(i+1,len(arr)):\n                for k in range(j+1,len(arr)):\n                    if (abs(arr[i] - arr[j]) > a):\n                        continue\n                    if (abs(arr[j] - arr[k]) > b):\n                        continue\n                    if (abs(arr[i] - arr[k]) > c):\n                        continue\n                    count+= 1\n                    print(arr[i],arr[j],arr[k])\n        \n        return count",
        "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "count-good-triplets",
        "has_notes": false
    },
    {
        "id": 884086883,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "1\u00a0month, 1\u00a0week",
        "timestamp": 1674527524,
        "status": 11,
        "status_display": "Wrong Answer",
        "runtime": "N/A",
        "url": "/submissions/detail/884086883/",
        "is_pending": "Not Pending",
        "title": "Maximum Product Difference Between Two Pairs",
        "memory": "N/A",
        "code": "class Solution:\r\n    def maxProductDifference(self, nums: List[int]) -> int:\r\n\r\n        firstBig=secondBig=1\r\n        firstSmall=secondSmall=10*10*10*10\r\n\r\n        for num in nums:\r\n            if num > firstBig:\r\n                secondBig = firstBig\r\n                firstBig = num\r\n                continue\r\n            \r\n            if num > secondBig:\r\n                secondBig = num\r\n            \r\n            if num < firstSmall:\r\n                secondSmall = firstSmall\r\n                firstSmall = num\r\n                continue\r\n            \r\n            if num < secondSmall:\r\n                secondSmall = num\r\n            \r\n            print(firstBig,secondBig,firstSmall,secondSmall)\r\n        \r\n        return (firstBig*secondBig- firstSmall*secondSmall)\r\n            \r\n",
        "compare_result": "110111110011101111110111111111111111111011111111111111111111111111111111111111111111111111111111",
        "title_slug": "maximum-product-difference-between-two-pairs",
        "has_notes": false
    },
    {
        "id": 884084722,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "1\u00a0month, 1\u00a0week",
        "timestamp": 1674527150,
        "status": 11,
        "status_display": "Wrong Answer",
        "runtime": "N/A",
        "url": "/submissions/detail/884084722/",
        "is_pending": "Not Pending",
        "title": "Maximum Product Difference Between Two Pairs",
        "memory": "N/A",
        "code": "class Solution:\r\n    def maxProductDifference(self, nums: List[int]) -> int:\r\n\r\n        firstBig=secondBig=firstSmall=secondSmall=nums[0]\r\n\r\n        for num in nums:\r\n            if num > firstBig:\r\n                secondBig = firstBig\r\n                firstBig = num\r\n                continue\r\n            \r\n            if num > secondBig:\r\n                secondBig = num\r\n            \r\n            if num < firstSmall:\r\n                secondSmall = firstSmall\r\n                firstSmall = num\r\n                continue\r\n            \r\n            if num < secondSmall:\r\n                secondSmall = num\r\n            \r\n            # print(firstBig,secondBig,firstSmall,secondSmall)\r\n        \r\n        return (firstBig*secondBig- firstSmall*secondSmall)\r\n            \r\n",
        "compare_result": "111001111101111011111111111111011011111011111111111111111111111111111111111111111111111111111111",
        "title_slug": "maximum-product-difference-between-two-pairs",
        "has_notes": false
    },
    {
        "id": 883805332,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "1\u00a0month, 1\u00a0week",
        "timestamp": 1674490949,
        "status": 11,
        "status_display": "Wrong Answer",
        "runtime": "N/A",
        "url": "/submissions/detail/883805332/",
        "is_pending": "Not Pending",
        "title": "Find the Town Judge",
        "memory": "N/A",
        "code": "class Solution:\n    def findJudge(self, n: int, trust: List[List[int]]) -> int:\n        if n < 2 or len(trust) <1:\n            return -1\n        \n        judge = trust[0][1]\n\n        for combo in trust:\n            if combo[1] != judge:\n                return -1\n        \n        return judge",
        "compare_result": "11110011111100111111110100001101000011111111111100110110001111000100111110100100010010110001",
        "title_slug": "find-the-town-judge",
        "has_notes": false
    },
    {
        "id": 879942310,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "1\u00a0month, 2\u00a0weeks",
        "timestamp": 1673967129,
        "status": 11,
        "status_display": "Wrong Answer",
        "runtime": "N/A",
        "url": "/submissions/detail/879942310/",
        "is_pending": "Not Pending",
        "title": "Minimum Number of Moves to Seat Everyone",
        "memory": "N/A",
        "code": "class Solution:\n    def minMovesToSeat(self, seats: List[int], students: List[int]) -> int:\n\n        setSeats = set(seats)\n        setStudents = set(students)\n        diff = sum(setSeats) - sum(setStudents)\n\n        return max(diff, -1*diff)",
        "compare_result": "1111110000000100000000100000000101000000100010101100110110000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000100",
        "title_slug": "minimum-number-of-moves-to-seat-everyone",
        "has_notes": false
    },
    {
        "id": 879298722,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "1\u00a0month, 2\u00a0weeks",
        "timestamp": 1673884754,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "228 ms",
        "url": "/submissions/detail/879298722/",
        "is_pending": "Not Pending",
        "title": "Delete Greatest Value in Each Row",
        "memory": "14.1 MB",
        "code": "class Solution:\n    def deleteGreatestValue(self, grid: List[List[int]]) -> int:\n\n        curGrid = grid\n        curRow = grid[0]\n        maxCount = 0\n\n        for i in range(len(grid[0])):\n            curMax = 0\n            for j in range(len(grid)):\n                if (max(grid[j])>curMax):\n                    curMax = max(grid[j])\n                grid[j].remove(max(grid[j]))\n            maxCount += curMax\n            print(grid)\n\n        return maxCount",
        "compare_result": "1111111111111111111111111111111111111111111111111111111",
        "title_slug": "delete-greatest-value-in-each-row",
        "has_notes": false
    },
    {
        "id": 872032834,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "2\u00a0months",
        "timestamp": 1672935512,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "65 ms",
        "url": "/submissions/detail/872032834/",
        "is_pending": "Not Pending",
        "title": "Unique Morse Code Words",
        "memory": "13.9 MB",
        "code": "class Solution:\n    def uniqueMorseRepresentations(self, words: List[str]) -> int:\n\n        morse = [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\n\t\t\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\n        alpha = \"abcdefghijklmnopqrstuvwxyz\"\n        \n\t\t# we map each alpha as key and morse[i] as key to that alpha\n        hashmap = {alpha[i]: morse[i] for i in range(len(alpha))}\n        \n\t\t# we make a set for collecting unique/different transformations\n        hashset = set()\n        for word in set(words):\n            t = \"\" # transform\n            for ch in word:\n                t += hashmap[ch]\n            hashset.add(t)\n        \n\t\t# in the end we just return the length of hashset, which tells us how many different transformations it has seen\n        return len(hashset)",
        "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "unique-morse-code-words",
        "has_notes": false
    },
    {
        "id": 872032486,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "2\u00a0months",
        "timestamp": 1672935482,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "73 ms",
        "url": "/submissions/detail/872032486/",
        "is_pending": "Not Pending",
        "title": "Unique Morse Code Words",
        "memory": "13.9 MB",
        "code": "class Solution:\n    def uniqueMorseRepresentations(self, words: List[str]) -> int:\n\n        morseCode={\n            'a': '.-', 'b': '-...', 'c': '-.-.', 'd': '-..', 'e': '.', 'f': '..-.', 'g': '--.', 'h': '....', 'i': '..', 'j': '.---', 'k': '-.-', 'l': '.-..', 'm': '--', 'n': '-.', 'o': '---', 'p': '.--.', 'q': '--.-', 'r': '.-.', 's': '...', 't': '-', 'u': '..-', 'v': '...-', 'w': '.--', 'x': '-..-', 'y': '-.--', 'z': '--..'}\n        \n        uniqueTransf = set()\n            \n        for word in set(words):\n            transformation = ''\n            for j in word:\n                transformation += morseCode[j]\n             \n            if transformation not in uniqueTransf:\n                uniqueTransf.add(transformation)\n        \n        return len(uniqueTransf)\n",
        "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "unique-morse-code-words",
        "has_notes": false
    },
    {
        "id": 872030986,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "2\u00a0months",
        "timestamp": 1672935332,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "48 ms",
        "url": "/submissions/detail/872030986/",
        "is_pending": "Not Pending",
        "title": "Unique Morse Code Words",
        "memory": "13.9 MB",
        "code": "class Solution:\n    def uniqueMorseRepresentations(self, words: List[str]) -> int:\n\n        morseCode={\n            'a': '.-', 'b': '-...', 'c': '-.-.', 'd': '-..', 'e': '.', 'f': '..-.', 'g': '--.', 'h': '....', 'i': '..', 'j': '.---', 'k': '-.-', 'l': '.-..', 'm': '--', 'n': '-.', 'o': '---', 'p': '.--.', 'q': '--.-', 'r': '.-.', 's': '...', 't': '-', 'u': '..-', 'v': '...-', 'w': '.--', 'x': '-..-', 'y': '-.--', 'z': '--..'}\n        \n        uniqueTransf = set()\n            \n        for i, word in enumerate(words):\n            transformation = ''\n            for j in range(len(word)):\n                transformation += morseCode[word[j]]\n             \n            if transformation not in uniqueTransf:\n                uniqueTransf.add(transformation)\n        \n        return len(uniqueTransf)\n",
        "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "unique-morse-code-words",
        "has_notes": false
    },
    {
        "id": 872026736,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "2\u00a0months",
        "timestamp": 1672934933,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "68 ms",
        "url": "/submissions/detail/872026736/",
        "is_pending": "Not Pending",
        "title": "Unique Morse Code Words",
        "memory": "14.1 MB",
        "code": "class Solution:\n    def uniqueMorseRepresentations(self, words: List[str]) -> int:\n\n        morseCode={\n            'a': '.-', 'b': '-...', 'c': '-.-.', 'd': '-..', 'e': '.', 'f': '..-.', 'g': '--.', 'h': '....', 'i': '..', 'j': '.---', 'k': '-.-', 'l': '.-..', 'm': '--', 'n': '-.', 'o': '---', 'p': '.--.', 'q': '--.-', 'r': '.-.', 's': '...', 't': '-', 'u': '..-', 'v': '...-', 'w': '.--', 'x': '-..-', 'y': '-.--', 'z': '--..'}\n        \n        uniqueTransf = {}\n        count = 0\n            \n        for i, word in enumerate(words):\n            transformation = ''\n            for j in range(len(word)):\n                transformation += morseCode[word[j]]\n             \n            if transformation not in uniqueTransf:\n                uniqueTransf[transformation] = count\n                count += 1\n        \n        return count\n",
        "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "unique-morse-code-words",
        "has_notes": false
    },
    {
        "id": 872015600,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "2\u00a0months",
        "timestamp": 1672933829,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "38 ms",
        "url": "/submissions/detail/872015600/",
        "is_pending": "Not Pending",
        "title": "Check If Two String Arrays are Equivalent",
        "memory": "13.9 MB",
        "code": "class Solution:\n    def arrayStringsAreEqual(self, word1: List[str], word2: List[str]) -> bool:\n\n        word1concat = ''.join(word1)\n        word2concat = ''.join(word2)\n\n        \n        if len(word1concat) != len(word2concat):\n            return False\n        \n        if word1concat != word2concat:\n            return False\n\n        return True ",
        "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "check-if-two-string-arrays-are-equivalent",
        "has_notes": false
    },
    {
        "id": 859817522,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "2\u00a0months, 3\u00a0weeks",
        "timestamp": 1671042048,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "77 ms",
        "url": "/submissions/detail/859817522/",
        "is_pending": "Not Pending",
        "title": "Number of Arithmetic Triplets",
        "memory": "13.8 MB",
        "code": "class Solution:\n    def arithmeticTriplets(self, nums: List[int], diff: int) -> int:\n\n        output = 0\n\n        for i in range(len(nums)):\n            first=second=third= 0\n            first = nums[i]\n\n            for j in range(i+1,len(nums)):\n\n                if (nums[j] == first + diff):\n                    second = nums[j]\n                \n                if (nums[j] == first + diff*2):\n                    third = nums[j]\n        \n            if (third > second and second > first):\n                output += 1\n            \n            \n\n        return output\n",
        "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "number-of-arithmetic-triplets",
        "has_notes": false
    },
    {
        "id": 851290734,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "3\u00a0months, 1\u00a0week",
        "timestamp": 1669655721,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "425 ms",
        "url": "/submissions/detail/851290734/",
        "is_pending": "Not Pending",
        "title": "Largest Local Values in a Matrix",
        "memory": "14.5 MB",
        "code": "class Solution:\n    def largestLocal(self, grid: List[List[int]]) -> List[List[int]]:\n\n\n        output = []\n\n        if(len(grid)>2):\n            for centerV in range(1,len(grid[0])-1):\n                subOutput = []\n                for centerH in range(1,len(grid[0])-1):\n                    maxLocal = 0\n\n                    for j in range(3):\n                        for i in range(3): \n                            local = grid[j+centerV-1][i+centerH-1]\n                            if(maxLocal < local):\n                                maxLocal = grid[j+centerV-1][i+centerH-1]\n                    \n                    subOutput.append(maxLocal)\n                output.append(subOutput)\n\n        \n        return output",
        "compare_result": "11111111111111111111111111111111111111111111111111",
        "title_slug": "largest-local-values-in-a-matrix",
        "has_notes": false
    },
    {
        "id": 844282071,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "3\u00a0months, 2\u00a0weeks",
        "timestamp": 1668568016,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "47 ms",
        "url": "/submissions/detail/844282071/",
        "is_pending": "Not Pending",
        "title": "Guess Number Higher or Lower",
        "memory": "13.9 MB",
        "code": "# The guess API is already defined for you.\n# @param num, your guess\n# @return -1 if num is higher than the picked number\n#          1 if num is lower than the picked number\n#          otherwise return 0\n# def guess(num: int) -> int:\n\nclass Solution:\n    def guessNumber(self, n: int) -> int:\n\n        start = 1\n        end = n\n        pick = (end-start)//2 + start\n\n        while(True):\n            if (guess(pick)== 1):\n                start = pick +1\n                pick = (end-start)//2 + start\n            \n            elif (guess(pick)== -1):\n                end = pick -1\n                pick = (end-start)//2 + start\n            else:\n                break\n        \n        return(pick)",
        "compare_result": "1111111111111111111111111",
        "title_slug": "guess-number-higher-or-lower",
        "has_notes": false
    },
    {
        "id": 844092178,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "3\u00a0months, 3\u00a0weeks",
        "timestamp": 1668538941,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "232 ms",
        "url": "/submissions/detail/844092178/",
        "is_pending": "Not Pending",
        "title": "Toeplitz Matrix",
        "memory": "13.9 MB",
        "code": "class Solution:\n    def isToeplitzMatrix(self, matrix: List[List[int]]) -> bool:\n\n        val = 0\n        \n        for j in range(len(matrix[0])):\n            initial = matrix[0][j]\n            for i in range(1,len(matrix)):\n                if (i+j < len(matrix[i])):\n                    val = matrix[i][i+j]\n                    # print(\"i: \",i,\"j: \",j, \"intial: \",initial,\"val: \", val)\n                    if (val != initial):\n                        return False\n\n        for k in range(1,len(matrix)):\n            initial = matrix[k][0]\n            for i in range(1,len(matrix)-k):\n                if (i < len(matrix[i])):\n                    val = matrix[i+k][i]\n                    # print(\"i: \",i,\"k: \",k, \"intial: \",initial,\"val: \", val)\n                    if (val != initial):\n                        return False\n\n        return True",
        "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "toeplitz-matrix",
        "has_notes": false
    },
    {
        "id": 844075718,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "3\u00a0months, 3\u00a0weeks",
        "timestamp": 1668537115,
        "status": 11,
        "status_display": "Wrong Answer",
        "runtime": "N/A",
        "url": "/submissions/detail/844075718/",
        "is_pending": "Not Pending",
        "title": "Toeplitz Matrix",
        "memory": "N/A",
        "code": "class Solution:\n    def isToeplitzMatrix(self, matrix: List[List[int]]) -> bool:\n\n        val = 0\n        \n        for j in range(len(matrix[0])):\n            initial = matrix[0][j]\n            for i in range(len(matrix[0])-j):\n                if (i < len(matrix)-j):\n                    val = matrix[i][i+j]\n                    # print(i,j, \"intial: \",initial,\"val: \", val)\n                    if (val != initial):\n                        return False\n\n        for k in range(1,len(matrix)):\n            initial = matrix[k][0]\n            for i in range(len(matrix)-k):\n                if (i < len(matrix[0])-k):\n                    val = matrix[i+k][i]\n                    # print(i,k, \"intial: \",initial,\"val: \", val)\n                    if (val != initial):\n                        return False\n\n        return True",
        "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111110111110111110110110110110110110111110110110110110111111111111110110111110110110110110111110110110110110110111111110110111111111111110111111111110110110110110110111110110111110111110111110111111111111111111111110110111110111110111111110110111111111111110110111111111111111111111111111111110111110110110110111110110110110110111111111111111111111111110111110110110110110111110110110111111110111110110111111111111",
        "title_slug": "toeplitz-matrix",
        "has_notes": false
    },
    {
        "id": 835443565,
        "lang": "javascript",
        "lang_name": "JavaScript",
        "time": "4\u00a0months",
        "timestamp": 1667403767,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "112 ms",
        "url": "/submissions/detail/835443565/",
        "is_pending": "Not Pending",
        "title": "Maximum Number of Words Found in Sentences",
        "memory": "44.2 MB",
        "code": "/**\n * @param {string[]} sentences\n * @return {number}\n */\nvar mostWordsFound = function(sentences) {\n    let cursum = maxsum = 0\n    for (const sentence of sentences){\n        cursum = sentence.split(' ').length\n        if ( cursum > maxsum){\n            maxsum = cursum\n        }\n        cursum = 0\n    }\n    return maxsum\n};",
        "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "maximum-number-of-words-found-in-sentences",
        "has_notes": false
    },
    {
        "id": 835442396,
        "lang": "javascript",
        "lang_name": "JavaScript",
        "time": "4\u00a0months",
        "timestamp": 1667403649,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "114 ms",
        "url": "/submissions/detail/835442396/",
        "is_pending": "Not Pending",
        "title": "Maximum Number of Words Found in Sentences",
        "memory": "43.9 MB",
        "code": "/**\n * @param {string[]} sentences\n * @return {number}\n */\nvar mostWordsFound = function(sentences) {\n    let cursum = maxsum = 0\n    sentences.forEach(sentence => {\n        cursum = sentence.split(' ').length\n        if ( cursum > maxsum){\n            maxsum = cursum\n        }\n        cursum = 0\n    })\n    return maxsum\n};",
        "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "maximum-number-of-words-found-in-sentences",
        "has_notes": false
    },
    {
        "id": 835438962,
        "lang": "javascript",
        "lang_name": "JavaScript",
        "time": "4\u00a0months",
        "timestamp": 1667403308,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "111 ms",
        "url": "/submissions/detail/835438962/",
        "is_pending": "Not Pending",
        "title": "Maximum Number of Words Found in Sentences",
        "memory": "42.9 MB",
        "code": "/**\n * @param {string[]} sentences\n * @return {number}\n */\nvar mostWordsFound = function(sentences) {\n    let curlet,prelet\n    let cursum = maxsum = 0\n    for(i=0;i<sentences.length;i++){\n        sentence = sentences[i]\n        prelet = sentence[0]\n        cursum ++\n        for(j=1;j<sentence.length;j++){\n            curlet = sentence[j]\n            // console.log(prelet, \" \", curlet)\n            if(curlet === \" \" & curlet !== prelet){\n                cursum++\n            }\n            prelet = curlet\n        }\n        if ( cursum > maxsum){\n            maxsum = cursum\n        }\n        cursum = 0\n    }\n    \n    \n    return maxsum\n};",
        "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "maximum-number-of-words-found-in-sentences",
        "has_notes": false
    },
    {
        "id": 834171011,
        "lang": "javascript",
        "lang_name": "JavaScript",
        "time": "4\u00a0months",
        "timestamp": 1667238907,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "77 ms",
        "url": "/submissions/detail/834171011/",
        "is_pending": "Not Pending",
        "title": "Number of Good Pairs",
        "memory": "42.1 MB",
        "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar numIdenticalPairs = function(nums) {\n    let good = 0\n    for(i=0;i<nums.length;i++){\n        for(j=i+1;j<nums.length;j++){\n            if (nums[i] == nums[j]){\n                good++\n            }\n        }\n    }\n    \n    return good\n};",
        "compare_result": "111111111111111111111111111111111111111111111111",
        "title_slug": "number-of-good-pairs",
        "has_notes": false
    },
    {
        "id": 834163987,
        "lang": "javascript",
        "lang_name": "JavaScript",
        "time": "4\u00a0months",
        "timestamp": 1667238268,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "136 ms",
        "url": "/submissions/detail/834163987/",
        "is_pending": "Not Pending",
        "title": "Shuffle the Array",
        "memory": "44.9 MB",
        "code": "/**\n * @param {number[]} nums\n * @param {number} n\n * @return {number[]}\n */\nvar shuffle = function(nums, n) {\n    let result = []\n    for (i=0;i<n;i++){\n        result.push(nums[i],nums[i+n])\n    }\n    return result\n};",
        "compare_result": "11111111111111111111111111111111111111111111111111111",
        "title_slug": "shuffle-the-array",
        "has_notes": false
    },
    {
        "id": 834163224,
        "lang": "javascript",
        "lang_name": "JavaScript",
        "time": "4\u00a0months",
        "timestamp": 1667238204,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "110 ms",
        "url": "/submissions/detail/834163224/",
        "is_pending": "Not Pending",
        "title": "Shuffle the Array",
        "memory": "44 MB",
        "code": "/**\n * @param {number[]} nums\n * @param {number} n\n * @return {number[]}\n */\nvar shuffle = function(nums, n) {\n    let result = []\n    for (i=0;i<n;i++){\n        result.push(nums[i])\n        result.push(nums[i+n])\n    }\n    return result\n};",
        "compare_result": "11111111111111111111111111111111111111111111111111111",
        "title_slug": "shuffle-the-array",
        "has_notes": false
    },
    {
        "id": 802233282,
        "lang": "javascript",
        "lang_name": "JavaScript",
        "time": "5\u00a0months, 2\u00a0weeks",
        "timestamp": 1663438250,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "122 ms",
        "url": "/submissions/detail/802233282/",
        "is_pending": "Not Pending",
        "title": "Count Items Matching a Rule",
        "memory": "45.9 MB",
        "code": "/**\n * @param {string[][]} items\n * @param {string} ruleKey\n * @param {string} ruleValue\n * @return {number}\n */\nvar countMatches = function(items, ruleKey, ruleValue) {\n    rule = {\"type\":0,\"color\":1,\"name\":2}\n    matching = 0\n    \n    for (i=0;i<items.length;i++){\n        if(items[i][rule[ruleKey]]===ruleValue){\n            matching++\n        }\n    }\n    return matching\n    \n};",
        "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "count-items-matching-a-rule",
        "has_notes": false
    },
    {
        "id": 795905544,
        "lang": "javascript",
        "lang_name": "JavaScript",
        "time": "5\u00a0months, 4\u00a0weeks",
        "timestamp": 1662766045,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "84 ms",
        "url": "/submissions/detail/795905544/",
        "is_pending": "Not Pending",
        "title": "Shuffle String",
        "memory": "44.1 MB",
        "code": "/**\n * @param {string} s\n * @param {number[]} indices\n * @return {string}\n */\nvar restoreString = function(s, indices) {\n    let target = new Array()\n    for(i=0;i<indices.length;i++){\n        target[indices[i]] = s[i]\n    }\n    return target.join('')\n};",
        "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "shuffle-string",
        "has_notes": false
    },
    {
        "id": 795902096,
        "lang": "javascript",
        "lang_name": "JavaScript",
        "time": "5\u00a0months, 4\u00a0weeks",
        "timestamp": 1662765441,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "99 ms",
        "url": "/submissions/detail/795902096/",
        "is_pending": "Not Pending",
        "title": "Create Target Array in the Given Order",
        "memory": "42.4 MB",
        "code": "/**\n * @param {number[]} nums\n * @param {number[]} index\n * @return {number[]}\n */\nvar createTargetArray = function(nums, index) {\n    let result = []\n    for(i=0;i<nums.length;i++){\n        result.splice(index[i],0,nums[i])\n        \n    }\n    return result\n};",
        "compare_result": "111111111111111111111111111111111111111111111",
        "title_slug": "create-target-array-in-the-given-order",
        "has_notes": false
    },
    {
        "id": 795894345,
        "lang": "javascript",
        "lang_name": "JavaScript",
        "time": "5\u00a0months, 4\u00a0weeks",
        "timestamp": 1662764115,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "81 ms",
        "url": "/submissions/detail/795894345/",
        "is_pending": "Not Pending",
        "title": "Decompress Run-Length Encoded List",
        "memory": "44.5 MB",
        "code": "/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar decompressRLElist = function(nums) {\n    let result = []\n    \n    for(i=1;i<nums.length;i+=2){\n        for(j=0;j<nums[i-1];j++){\n            result.push(nums[i])\n        } \n    }\n    \n    return(result)\n};",
        "compare_result": "11111111111111111111111111111111111111111111111111111",
        "title_slug": "decompress-run-length-encoded-list",
        "has_notes": false
    },
    {
        "id": 789076905,
        "lang": "javascript",
        "lang_name": "JavaScript",
        "time": "6\u00a0months",
        "timestamp": 1662059233,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "72 ms",
        "url": "/submissions/detail/789076905/",
        "is_pending": "Not Pending",
        "title": "Richest Customer Wealth",
        "memory": "42.5 MB",
        "code": "/**\n * @param {number[][]} accounts\n * @return {number}\n */\nvar maximumWealth = function(accounts) {\n    maxSum = 0\n    \n    for(i=0;i<accounts.length;i++){\n        wealth = 0\n        \n        for(const jbank of accounts[i]){\n            wealth += jbank\n        }\n        if(maxSum< wealth){\n            maxSum = wealth\n        } \n    }\n    \n    return maxSum\n};",
        "compare_result": "1111111111111111111111111111111111",
        "title_slug": "richest-customer-wealth",
        "has_notes": false
    },
    {
        "id": 788920638,
        "lang": "javascript",
        "lang_name": "JavaScript",
        "time": "6\u00a0months",
        "timestamp": 1662047553,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "76 ms",
        "url": "/submissions/detail/788920638/",
        "is_pending": "Not Pending",
        "title": "Final Value of Variable After Performing Operations",
        "memory": "42.8 MB",
        "code": "/**\n * @param {string[]} operations\n * @return {number}\n */\nvar finalValueAfterOperations = function(operations) {\n    let Xsum = 0\n    \n    for(op=0;op<operations.length;op++){\n        if(operations[op][1]==='+'){\n            Xsum += 1\n        }\n        else{\n            Xsum -=1\n        }\n    }\n    return Xsum\n};",
        "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "final-value-of-variable-after-performing-operations",
        "has_notes": false
    },
    {
        "id": 788140591,
        "lang": "javascript",
        "lang_name": "JavaScript",
        "time": "6\u00a0months, 1\u00a0week",
        "timestamp": 1661964867,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "91 ms",
        "url": "/submissions/detail/788140591/",
        "is_pending": "Not Pending",
        "title": "Running Sum of 1d Array",
        "memory": "42.6 MB",
        "code": "/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar runningSum = function(nums) {\n    let arr = new Array()\n    arr.push(nums[0])\n    for(i=1;i<nums.length;i++){\n        arr.push(arr[i-1]+nums[i])\n    }\n    return arr\n};",
        "compare_result": "11111111111111111111111111111111111111111111111111111",
        "title_slug": "running-sum-of-1d-array",
        "has_notes": false
    },
    {
        "id": 788127132,
        "lang": "javascript",
        "lang_name": "JavaScript",
        "time": "6\u00a0months, 1\u00a0week",
        "timestamp": 1661963739,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "108 ms",
        "url": "/submissions/detail/788127132/",
        "is_pending": "Not Pending",
        "title": "Running Sum of 1d Array",
        "memory": "42.5 MB",
        "code": "/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar runningSum = function(nums) {\n    \n    for(i=1;i<nums.length;i++){\n        nums[i] += nums[i-1]\n    }\n    return nums\n};",
        "compare_result": "11111111111111111111111111111111111111111111111111111",
        "title_slug": "running-sum-of-1d-array",
        "has_notes": false
    },
    {
        "id": 788124614,
        "lang": "javascript",
        "lang_name": "JavaScript",
        "time": "6\u00a0months, 1\u00a0week",
        "timestamp": 1661963517,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "123 ms",
        "url": "/submissions/detail/788124614/",
        "is_pending": "Not Pending",
        "title": "Concatenation of Array",
        "memory": "45.8 MB",
        "code": "/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar getConcatenation = function(nums) {\n    let arr = []\n    \n    for(i=0;i<nums.length*2;i++){\n        ind = i\n        if (i>=nums.length){\n            ind = ind -nums.length\n        }\n        arr.push(nums[ind])\n    }\n    \n    return arr\n};",
        "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "concatenation-of-array",
        "has_notes": false
    },
    {
        "id": 788114688,
        "lang": "javascript",
        "lang_name": "JavaScript",
        "time": "6\u00a0months, 1\u00a0week",
        "timestamp": 1661962675,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "120 ms",
        "url": "/submissions/detail/788114688/",
        "is_pending": "Not Pending",
        "title": "Build Array from Permutation",
        "memory": "45.5 MB",
        "code": "/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar buildArray = function(nums) {\n    let arr = new Array(nums.length);\n    \n    for (i = 0; i <nums.length; i++){\n        arr[i] = nums[nums[i]]\n    }\n    \n    return arr\n    \n    \n};",
        "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "build-array-from-permutation",
        "has_notes": false
    },
    {
        "id": 788113799,
        "lang": "javascript",
        "lang_name": "JavaScript",
        "time": "6\u00a0months, 1\u00a0week",
        "timestamp": 1661962597,
        "status": 11,
        "status_display": "Wrong Answer",
        "runtime": "N/A",
        "url": "/submissions/detail/788113799/",
        "is_pending": "Not Pending",
        "title": "Build Array from Permutation",
        "memory": "N/A",
        "code": "/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar buildArray = function(nums) {\n    let arr = new Array(6);\n    \n    for (i = 0; i <nums.length; i++){\n        arr[i] = nums[nums[i]]\n    }\n    \n    return arr\n    \n    \n};",
        "compare_result": "11001111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110100000000",
        "title_slug": "build-array-from-permutation",
        "has_notes": false
    },
    {
        "id": 755718521,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "7\u00a0months, 2\u00a0weeks",
        "timestamp": 1658692626,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "75 ms",
        "url": "/submissions/detail/755718521/",
        "is_pending": "Not Pending",
        "title": "Kids With the Greatest Number of Candies",
        "memory": "14 MB",
        "code": "class Solution:\n    def kidsWithCandies(self, candies: List[int], extraCandies: int) -> List[bool]:\n        \n        maxCandies = max(candies)\n        return [((candy + extraCandies)>=maxCandies) for candy in candies]",
        "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "kids-with-the-greatest-number-of-candies",
        "has_notes": false
    },
    {
        "id": 755692196,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "7\u00a0months, 2\u00a0weeks",
        "timestamp": 1658690300,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "91 ms",
        "url": "/submissions/detail/755692196/",
        "is_pending": "Not Pending",
        "title": "Maximum Number of Words Found in Sentences",
        "memory": "14 MB",
        "code": "class Solution:\n    def mostWordsFound(self, sentences: List[str]) -> int:\n        \n        return max([len(sentance.split()) for sentance in sentences])",
        "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "maximum-number-of-words-found-in-sentences",
        "has_notes": false
    },
    {
        "id": 755660557,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "7\u00a0months, 2\u00a0weeks",
        "timestamp": 1658687687,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "115 ms",
        "url": "/submissions/detail/755660557/",
        "is_pending": "Not Pending",
        "title": "Shuffle the Array",
        "memory": "14.2 MB",
        "code": "class Solution:\n    def shuffle(self, nums: List[int], n: int) -> List[int]:\n        \n        return list(chain.from_iterable([[nums[x],nums[n+x]] for x in range(n)]))",
        "compare_result": "11111111111111111111111111111111111111111111111111111",
        "title_slug": "shuffle-the-array",
        "has_notes": false
    },
    {
        "id": 753347410,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "7\u00a0months, 2\u00a0weeks",
        "timestamp": 1658454430,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "90 ms",
        "url": "/submissions/detail/753347410/",
        "is_pending": "Not Pending",
        "title": "Richest Customer Wealth",
        "memory": "13.9 MB",
        "code": "class Solution:\n    def maximumWealth(self, accounts: List[List[int]]) -> int:\n        \n        maxWealth = 0\n        \n        for i in accounts:\n            maxWealth = max(maxWealth,sum(i))\n            \n        return maxWealth",
        "compare_result": "1111111111111111111111111111111111",
        "title_slug": "richest-customer-wealth",
        "has_notes": false
    },
    {
        "id": 753345784,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "7\u00a0months, 2\u00a0weeks",
        "timestamp": 1658454214,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "96 ms",
        "url": "/submissions/detail/753345784/",
        "is_pending": "Not Pending",
        "title": "Final Value of Variable After Performing Operations",
        "memory": "13.6 MB",
        "code": "class Solution:\n    def finalValueAfterOperations(self, operations: List[str]) -> int:\n        op = {\n        \"-\":-1,\n        \"+\":1\n        }\n        result = 0\n\n        for i in operations:\n            result += op[i[1]]\n\n        return result",
        "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "final-value-of-variable-after-performing-operations",
        "has_notes": false
    },
    {
        "id": 747148417,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "7\u00a0months, 3\u00a0weeks",
        "timestamp": 1657822318,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "50 ms",
        "url": "/submissions/detail/747148417/",
        "is_pending": "Not Pending",
        "title": "Truncate Sentence",
        "memory": "14 MB",
        "code": "class Solution:\n    def truncateSentence(self, s: str, k: int) -> str:\n        spaces = 0\n        for i in range(len(s)):\n            if s[i] == ' ':\n                spaces += 1\n                \n            if spaces == k:\n                return s[:i]\n            \n        return s",
        "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "truncate-sentence",
        "has_notes": false
    },
    {
        "id": 747143196,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "7\u00a0months, 3\u00a0weeks",
        "timestamp": 1657821915,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "41 ms",
        "url": "/submissions/detail/747143196/",
        "is_pending": "Not Pending",
        "title": "Sum of Unique Elements",
        "memory": "13.9 MB",
        "code": "class Solution:\n    def sumOfUnique(self, nums: List[int]) -> int:\n        Nonunique = {}\n        total = 0\n        for i in nums:\n            total += i\n            if i not in Nonunique:\n                Nonunique[i] = 1\n            else:\n                Nonunique[i] += 1\n                total -= i*Nonunique[i]\n                Nonunique[i] = 0\n                \n        return total",
        "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "sum-of-unique-elements",
        "has_notes": false
    },
    {
        "id": 746638963,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "7\u00a0months, 3\u00a0weeks",
        "timestamp": 1657774196,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "91 ms",
        "url": "/submissions/detail/746638963/",
        "is_pending": "Not Pending",
        "title": "Sum of Unique Elements",
        "memory": "14 MB",
        "code": "class Solution:\n    def sumOfUnique(self, nums: List[int]) -> int:\n        Nonunique = {}\n        total = 0\n        for i in nums:\n            if i not in Nonunique:\n                Nonunique[i] = 0\n            else:\n                Nonunique[i] += 1\n                \n        print(Nonunique)\n        \n        for key in Nonunique:\n            if Nonunique[key]== 0:\n                total += key\n        return total",
        "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "sum-of-unique-elements",
        "has_notes": false
    },
    {
        "id": 741377431,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "8\u00a0months",
        "timestamp": 1657241251,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "116 ms",
        "url": "/submissions/detail/741377431/",
        "is_pending": "Not Pending",
        "title": "Increasing Decreasing String",
        "memory": "13.9 MB",
        "code": "class Solution:\n    def sortString(self, s: str) -> str:\n        \n        result = \"\"\n        stringS = sorted(s)\n        \n        \n        while (len(s) > 0):\n            \n            stringS = sorted(set(s))\n            for letter in stringS:\n                result += letter\n                s = s.replace(letter,\"\",1)\n\n            stringS = sorted(set(s),reverse=True)\n\n            for letter in stringS:\n                result += letter\n                s = s.replace(letter,\"\",1)\n                \n        return result",
        "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "increasing-decreasing-string",
        "has_notes": false
    },
    {
        "id": 740509513,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "8\u00a0months",
        "timestamp": 1657156032,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "50 ms",
        "url": "/submissions/detail/740509513/",
        "is_pending": "Not Pending",
        "title": "Happy Number",
        "memory": "13.9 MB",
        "code": "class Solution:\n    def isHappy(self, n: int) -> bool:\n        \n        \n        def digitSplit(number):\n            digits = [number%10]\n            tempNum = number//10\n            \n            while(tempNum >0):\n                digits.insert(0,tempNum%10)\n                tempNum = tempNum // 10\n            \n            print(digits)\n            return digits\n                \n            \n        uniques = {}\n        uniqueSum = n\n        \n        while (uniqueSum not in uniques):\n            uniques[uniqueSum] = 1\n            uniqueDigits = digitSplit(uniqueSum)\n            uniqueSum = 0\n            \n            for num in uniqueDigits:\n                uniqueSum += num*num\n                \n            if uniqueSum == 1:\n                return True\n                \n        return False",
        "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "happy-number",
        "has_notes": false
    },
    {
        "id": 721675521,
        "lang": "python",
        "lang_name": "Python",
        "time": "8\u00a0months, 3\u00a0weeks",
        "timestamp": 1655171870,
        "status": 11,
        "status_display": "Wrong Answer",
        "runtime": "N/A",
        "url": "/submissions/detail/721675521/",
        "is_pending": "Not Pending",
        "title": "Unique Morse Code Words",
        "memory": "N/A",
        "code": "class Solution(object):\n    def uniqueMorseRepresentations(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: int\n        \"\"\"\n        morseCode={}\n        transformationS = []\n        conversion = [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\n        \n        for i in range(26):\n            morseCode[i] = conversion[i]\n        \n        for word in words:\n            transformation = \"\"\n            for letter in word:\n                transformation += morseCode[ord(letter)-ord('a')]\n            transformationS.append(transformation)\n        \n        if len(words) == 1:\n            return 1\n        if len(words) == 0:\n            return 0\n        \n        return (len(transformationS) - len(set(transformationS)))",
        "compare_result": "1100000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "title_slug": "unique-morse-code-words",
        "has_notes": false
    },
    {
        "id": 721657782,
        "lang": "python",
        "lang_name": "Python",
        "time": "8\u00a0months, 3\u00a0weeks",
        "timestamp": 1655169679,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "19 ms",
        "url": "/submissions/detail/721657782/",
        "is_pending": "Not Pending",
        "title": "Number of Good Pairs",
        "memory": "13.5 MB",
        "code": "class Solution(object):\n    def numIdenticalPairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        uniquePairs = {}\n        goodPairs = 0\n        \n        for i in range(len(nums)):\n            if nums[i] in uniquePairs:\n                uniquePairs[nums[i]] += 1\n            else:\n                uniquePairs[nums[i]] = 1\n        \n        for j in set(nums):\n            x = uniquePairs[j]\n            goodPairs += x*(x-1)*0.5\n        \n        return int(goodPairs)\n                ",
        "compare_result": "111111111111111111111111111111111111111111111111",
        "title_slug": "number-of-good-pairs",
        "has_notes": false
    },
    {
        "id": 721639843,
        "lang": "python",
        "lang_name": "Python",
        "time": "8\u00a0months, 3\u00a0weeks",
        "timestamp": 1655167357,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "18 ms",
        "url": "/submissions/detail/721639843/",
        "is_pending": "Not Pending",
        "title": "Number of Good Pairs",
        "memory": "13.5 MB",
        "code": "class Solution(object):\n    def numIdenticalPairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n\n        goodPairs = 0\n        \n        for i in range(len(nums)):\n            for j in nums[i+1:]:\n                if nums[i] == j:\n                    goodPairs += 1\n        \n        return goodPairs\n                ",
        "compare_result": "111111111111111111111111111111111111111111111111",
        "title_slug": "number-of-good-pairs",
        "has_notes": false
    },
    {
        "id": 719833655,
        "lang": "python",
        "lang_name": "Python",
        "time": "8\u00a0months, 4\u00a0weeks",
        "timestamp": 1654970073,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "36 ms",
        "url": "/submissions/detail/719833655/",
        "is_pending": "Not Pending",
        "title": "Check if the Sentence Is Pangram",
        "memory": "13.7 MB",
        "code": "class Solution(object):\n    def checkIfPangram(self, sentence):\n        \"\"\"\n        :type sentence: strDifficulty\n        :rtype: bool\n        \"\"\"\n        letters = {}\n        uniqueNum = 0\n        \n        for i in sentence:\n            if i not in letters:\n                letters[i] = 1\n                uniqueNum +=1\n        \n        if uniqueNum == 26:\n            return True\n        \n        return False",
        "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "check-if-the-sentence-is-pangram",
        "has_notes": false
    },
    {
        "id": 711660070,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "9\u00a0months, 1\u00a0week",
        "timestamp": 1654046651,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "60 ms",
        "url": "/submissions/detail/711660070/",
        "is_pending": "Not Pending",
        "title": "Running Sum of 1d Array",
        "memory": "14 MB",
        "code": "class Solution:\n    def runningSum(self, nums: List[int]) -> List[int]:\n        \n        runningSum =[]\n        sums = 0\n        \n        for i in nums:\n            sums += i\n            runningSum.append(sums)\n        \n        \n        return runningSum",
        "compare_result": "11111111111111111111111111111111111111111111111111111",
        "title_slug": "running-sum-of-1d-array",
        "has_notes": false
    },
    {
        "id": 708668182,
        "lang": "python",
        "lang_name": "Python",
        "time": "9\u00a0months, 1\u00a0week",
        "timestamp": 1653702187,
        "status": 11,
        "status_display": "Wrong Answer",
        "runtime": "N/A",
        "url": "/submissions/detail/708668182/",
        "is_pending": "Not Pending",
        "title": "Rings and Rods",
        "memory": "N/A",
        "code": "class Solution(object):\n    def countPoints(self, rings):\n        \"\"\"\n        :type rings: str\n        :rtype: int\n        \"\"\"\n        ringsList = {}\n        distinctRings = 0\n\n        for i in range(len(rings)//2):\n\n            if rings[2*i+1] not in ringsList:\n                ringsList[rings[2*i+1]] = rings[2*i]\n            else:\n                ringsList[rings[2*i+1]] += rings[2*i]\n\n            if len(set(ringsList[rings[2*i+1]] )) == len(ringsList[rings[2*i+1]]) == 3:\n                distinctRings += 1\n                \n        \n        return distinctRings\n            \n            ",
        "compare_result": "111111111111111110110101110111110010100000000010000000000011111110",
        "title_slug": "rings-and-rods",
        "has_notes": false
    },
    {
        "id": 707960662,
        "lang": "python",
        "lang_name": "Python",
        "time": "9\u00a0months, 2\u00a0weeks",
        "timestamp": 1653609084,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "255 ms",
        "url": "/submissions/detail/707960662/",
        "is_pending": "Not Pending",
        "title": "Count the Number of Consistent Strings",
        "memory": "15.9 MB",
        "code": "class Solution(object):\n    def countConsistentStrings(self, allowed, words):\n        \"\"\"\n        :type allowed: str\n        :type words: List[str]\n        :rtype: int\n        \"\"\"\n        count = 0\n        allowedchar = {}\n        for i in allowed:\n            allowedchar[i] = 0\n            \n        for word in words:\n            count += 1\n            for j in word:\n                if j not in allowedchar:\n                    count -= 1\n                    break\n            \n        return count",
        "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "count-the-number-of-consistent-strings",
        "has_notes": false
    },
    {
        "id": 707951886,
        "lang": "python",
        "lang_name": "Python",
        "time": "9\u00a0months, 2\u00a0weeks",
        "timestamp": 1653607479,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "154 ms",
        "url": "/submissions/detail/707951886/",
        "is_pending": "Not Pending",
        "title": "Count Number of Pairs With Absolute Difference K",
        "memory": "13.5 MB",
        "code": "class Solution(object):\n    def countKDifference(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        goodPairs = 0\n        for i in range(len(nums)):\n            for j in range(i,len(nums)):\n                if abs(nums[i]-nums[j]) == k:\n                    goodPairs += 1\n        \n        return goodPairs",
        "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "count-number-of-pairs-with-absolute-difference-k",
        "has_notes": false
    },
    {
        "id": 707293171,
        "lang": "python",
        "lang_name": "Python",
        "time": "9\u00a0months, 2\u00a0weeks",
        "timestamp": 1653528867,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "25 ms",
        "url": "/submissions/detail/707293171/",
        "is_pending": "Not Pending",
        "title": "Number of 1 Bits",
        "memory": "13.4 MB",
        "code": "class Solution(object):\n    def hammingWeight(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        ones = 0\n        temp = n\n        while temp > 0:\n            if temp % 2 == 1:\n                ones += 1\n            temp = temp//2\n        \n\n        return ones",
        "compare_result
        "title_slug": "number-of-1-bits",
        "has_notes": false
    },
    {
        "id": 700266419,
        "lang": "python",
        "lang_name": "Python",
        "time": "9\u00a0months, 3\u00a0weeks",
        "timestamp": 1652648925,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "463 ms",
        "url": "/submissions/detail/700266419/",
        "is_pending": "Not Pending",
        "title": "How Many Numbers Are Smaller Than the Current Number",
        "memory": "13.1 MB",
        "code": "class Solution(object):\n    def smallerNumbersThanCurrent(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        solution=[0]*len(nums)\n        \n        for i in range(len(nums)):\n            for j in range(len(nums)):\n                if j != i and nums[j] < nums[i]:\n                    solution[i] += 1\n        \n        return solution",
        "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "how-many-numbers-are-smaller-than-the-current-number",
        "has_notes": false
    },
    {
        "id": 700253040,
        "lang": "python",
        "lang_name": "Python",
        "time": "9\u00a0months, 3\u00a0weeks",
        "timestamp": 1652647215,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "42 ms",
        "url": "/submissions/detail/700253040/",
        "is_pending": "Not Pending",
        "title": "Jewels and Stones",
        "memory": "13.6 MB",
        "code": "class Solution(object):\n    def numJewelsInStones(self, jewels, stones):\n        \"\"\"\n        :type jewels: str\n        :type stones: str\n        :rtype: int\n        \"\"\"\n        \n        numJewels = 0\n        target = {}\n        \n        for jewel in jewels:\n            target[jewel] = 0\n        \n        for stone in stones:\n            if stone in target:\n                target[stone] += 1\n                numJewels += 1\n                \n        return numJewels",
        "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "jewels-and-stones",
        "has_notes": false
    },
    {
        "id": 697127650,
        "lang": "python",
        "lang_name": "Python",
        "time": "10\u00a0months",
        "timestamp": 1652233265,
        "status": 14,
        "status_display": "Time Limit Exceeded",
        "runtime": "N/A",
        "url": "/submissions/detail/697127650/",
        "is_pending": "Not Pending",
        "title": "Maximum Average Subarray I",
        "memory": "N/A",
        "code": "class Solution(object):\n    def findMaxAverage(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: float\n        \"\"\"\n        maxsum = sum(nums[:k])\n        \n        if len(nums) == k:\n            return float(maxsum)/k\n        \n        for i in range(len(nums)-k+1):\n            if sum(nums[i:i+k]) > maxsum:\n                maxsum = sum(nums[i:i+k]) \n\n        return float(maxsum)/k",
        "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000",
        "title_slug": "maximum-average-subarray-i",
        "has_notes": false
    },
    {
        "id": 696458738,
        "lang": "python",
        "lang_name": "Python",
        "time": "10\u00a0months",
        "timestamp": 1652145592,
        "status": 11,
        "status_display": "Wrong Answer",
        "runtime": "N/A",
        "url": "/submissions/detail/696458738/",
        "is_pending": "Not Pending",
        "title": "Sqrt(x)",
        "memory": "N/A",
        "code": "class Solution(object):\n    def mySqrt(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        left = 0\n        right = x-1\n        mid = 0\n        \n        while left <= right:\n            \n            mid = (left + right)//2\n            \n            if mid == left or mid ==right:\n                return mid\n            \n            if mid*mid <x:\n                left = mid\n            if mid*mid >x:\n                right = mid\n            if mid*mid == x:\n                return mid\n        \n        return mid",
        "compare_result
        "title_slug": "sqrtx",
        "has_notes": false
    },
    {
        "id": 696458041,
        "lang": "python",
        "lang_name": "Python",
        "time": "10\u00a0months",
        "timestamp": 1652145491,
        "status": 14,
        "status_display": "Time Limit Exceeded",
        "runtime": "N/A",
        "url": "/submissions/detail/696458041/",
        "is_pending": "Not Pending",
        "title": "Sqrt(x)",
        "memory": "N/A",
        "code": "class Solution(object):\n    def mySqrt(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        left = 0\n        right = x-1\n        mid = 0\n        \n        while left <= right:\n            \n            mid = (left + right)//2\n            \n            if mid == left or mid ==right:\n                exit\n            \n            if mid*mid <x:\n                left = mid\n            if mid*mid >x:\n                right = mid\n            if mid*mid == x:\n                return mid\n        \n        return mid",
        "compare_result
        "title_slug": "sqrtx",
        "has_notes": false
    },
    {
        "id": 692671448,
        "lang": "python",
        "lang_name": "Python",
        "time": "10\u00a0months, 1\u00a0week",
        "timestamp": 1651627960,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "16 ms",
        "url": "/submissions/detail/692671448/",
        "is_pending": "Not Pending",
        "title": "Plus One",
        "memory": "13.3 MB",
        "code": "class Solution(object):\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n        carry = 0\n        result = 0\n        i = 1\n        digits[-1] += 1\n        \n        while i< len(digits):\n            if digits[-i] >9:\n                digits[-i] = 0\n                digits[-i-1] +=1\n            i += 1\n        \n        if digits[-len(digits)] >9:\n            digits[-len(digits)] = 0\n            digits.insert(0,1)\n            \n        \n        return digits",
        "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "plus-one",
        "has_notes": false
    },
    {
        "id": 691091562,
        "lang": "python",
        "lang_name": "Python",
        "time": "10\u00a0months, 1\u00a0week",
        "timestamp": 1651428936,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "32 ms",
        "url": "/submissions/detail/691091562/",
        "is_pending": "Not Pending",
        "title": "Length of Last Word",
        "memory": "14 MB",
        "code": "class Solution(object):\n    def lengthOfLastWord(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        length = 0      \n        for i in range(len(s)):\n            if s[-i-1] != \" \":\n                length += 1\n            if length >0 and s[-i-1] == \" \":\n                return length\n        return length",
        "compare_result": "1111111111111111111111111111111111111111111111111111111111",
        "title_slug": "length-of-last-word",
        "has_notes": false
    },
    {
        "id": 691090546,
        "lang": "python",
        "lang_name": "Python",
        "time": "10\u00a0months, 1\u00a0week",
        "timestamp": 1651428834,
        "status": 11,
        "status_display": "Wrong Answer",
        "runtime": "N/A",
        "url": "/submissions/detail/691090546/",
        "is_pending": "Not Pending",
        "title": "Length of Last Word",
        "memory": "N/A",
        "code": "class Solution(object):\n    def lengthOfLastWord(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        length = 0      \n        for i in range(len(s)):\n            if s[-i-1] != \" \":\n                length += 1\n            if length >1 and s[-i-1] == \" \":\n                return length\n        return length",
        "compare_result": "1111111001111111111111111111111111111111111111111111111111",
        "title_slug": "length-of-last-word",
        "has_notes": false
    },
    {
        "id": 691080999,
        "lang": "python",
        "lang_name": "Python",
        "time": "10\u00a0months, 1\u00a0week",
        "timestamp": 1651427838,
        "status": 14,
        "status_display": "Time Limit Exceeded",
        "runtime": "N/A",
        "url": "/submissions/detail/691080999/",
        "is_pending": "Not Pending",
        "title": "Maximum Subarray",
        "memory": "N/A",
        "code": "class Solution(object):\n    def maxSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        window = len(nums)\n        maxsum = nums[0]\n        cursum = 0\n\n        for i in range(len(nums)):\n            window = 0\n            cursum = 0\n            while window < len(nums[i:]):\n                w = nums[i:i+window+1]\n                cursum += nums[i+window]\n                if cursum > maxsum:\n                    maxsum = cursum\n                window += 1\n        \n        return maxsum",
        "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111000000000",
        "title_slug": "maximum-subarray",
        "has_notes": false
    },
    {
        "id": 690568705,
        "lang": "python",
        "lang_name": "Python",
        "time": "10\u00a0months, 1\u00a0week",
        "timestamp": 1651369099,
        "status": 14,
        "status_display": "Time Limit Exceeded",
        "runtime": "N/A",
        "url": "/submissions/detail/690568705/",
        "is_pending": "Not Pending",
        "title": "Maximum Subarray",
        "memory": "N/A",
        "code": "class Solution(object):\n    def maxSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        window = len(nums)\n        maxsum = -10**4 -1\n        \n        for i in range(len(nums)):\n            window = len(nums[i:])\n            while window > 0:\n                if sum(nums[i:i+window]) > maxsum:\n                    maxsum = sum(nums[i:i+window])\n                window -= 1\n        \n        return maxsum",
        "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111000000000",
        "title_slug": "maximum-subarray",
        "has_notes": false
    },
    {
        "id": 690568272,
        "lang": "python",
        "lang_name": "Python",
        "time": "10\u00a0months, 1\u00a0week",
        "timestamp": 1651369022,
        "status": 11,
        "status_display": "Wrong Answer",
        "runtime": "N/A",
        "url": "/submissions/detail/690568272/",
        "is_pending": "Not Pending",
        "title": "Maximum Subarray",
        "memory": "N/A",
        "code": "class Solution(object):\n    def maxSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        window = len(nums)\n        maxsum = 0\n        \n        for i in range(len(nums)):\n            window = len(nums[i:])\n            while window > 0:\n                if sum(nums[i:i+window]) > maxsum:\n                    maxsum = sum(nums[i:i+window])\n                window -= 1\n        \n        return maxsum",
        "compare_result": "11110100111011111101011111111111011111111101111011111111101111111111111011111111111111111111111101111111111111111111101111111111111111111111111111111111111111111111111111111111111111111111111111111011000000000",
        "title_slug": "maximum-subarray",
        "has_notes": false
    },
    {
        "id": 690561795,
        "lang": "python",
        "lang_name": "Python",
        "time": "10\u00a0months, 1\u00a0week",
        "timestamp": 1651367885,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "29 ms",
        "url": "/submissions/detail/690561795/",
        "is_pending": "Not Pending",
        "title": "Backspace String Compare",
        "memory": "13.5 MB",
        "code": "class Solution(object):\n    def backspaceCompare(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        s2 = \"\"\n        j = 0\n        t2 = \"\"\n        k = 0\n        \n        for i in range(len(s)):\n            if s[i] == \"#\" and len(s2)>0:\n                s2 = s2[:-1]\n            if s[i] != \"#\":\n                s2 += s[i]\n        \n        for i in range(len(t)):\n            if t[i] == \"#\" and len(t2)>0:\n                t2 = t2[:-1]\n            if t[i] != \"#\":\n                t2 += t[i]\n        return s2 == t2",
        "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "backspace-string-compare",
        "has_notes": false
    },
    {
        "id": 690561615,
        "lang": "python",
        "lang_name": "Python",
        "time": "10\u00a0months, 1\u00a0week",
        "timestamp": 1651367854,
        "status": 15,
        "status_display": "Runtime Error",
        "runtime": "N/A",
        "url": "/submissions/detail/690561615/",
        "is_pending": "Not Pending",
        "title": "Backspace String Compare",
        "memory": "N/A",
        "code": "class Solution(object):\n    def backspaceCompare(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        s2 = \"\"\n        j = 0\n        t2 = \"\"\n        k = 0\n        \n        for i in range(len(s)):\n            if s[i] == \"#\" and len(s2)>0:\n                s2 = s2[:-1]\n            if s[i] != \"#\":\n                s2 += s[i]\n        \n        for i in range(len(t)):\n            if t[i] == \"#\" and len(t2)>0:\n                t2 = t2[:-1]\n            if s[i] != \"#\":\n                t2 += t[i]\n        return s2 == t2",
        "compare_result": "111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "title_slug": "backspace-string-compare",
        "has_notes": false
    },
    {
        "id": 689934757,
        "lang": "python",
        "lang_name": "Python",
        "time": "10\u00a0months, 1\u00a0week",
        "timestamp": 1651276360,
        "status": 11,
        "status_display": "Wrong Answer",
        "runtime": "N/A",
        "url": "/submissions/detail/689934757/",
        "is_pending": "Not Pending",
        "title": "Search Insert Position",
        "memory": "N/A",
        "code": "class Solution(object):\n    def searchInsert(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n\n        i = 0\n        j = len(nums)\n        mid = int(i + (j-i)/2//1)\n        \n        if target <= nums[0]:\n            return (i)\n        if target > nums[-1]:\n            return (j)\n\n\n\n        while mid > i:\n            mid = int(i + (j-i)/2//1)\n            x = nums[mid]\n            if target > nums[mid]:\n                i = int(i + (j-i)/2//1)\n            elif target < nums[mid]:\n                j = int((j-i)/2//1)\n            elif nums[mid] == target:\n                return(mid)\n\n        return(i+1)",
        "compare_result": "1111111111111111111111111111111111111011011111111111111111111101",
        "title_slug": "search-insert-position",
        "has_notes": false
    },
    {
        "id": 689933359,
        "lang": "python",
        "lang_name": "Python",
        "time": "10\u00a0months, 1\u00a0week",
        "timestamp": 1651276056,
        "status": 11,
        "status_display": "Wrong Answer",
        "runtime": "N/A",
        "url": "/submissions/detail/689933359/",
        "is_pending": "Not Pending",
        "title": "Search Insert Position",
        "memory": "N/A",
        "code": "class Solution(object):\n    def searchInsert(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n\n        i = 0\n        j = len(nums)\n        mid = int(i + (j-i)/2//1)\n\n        if target > nums[-1]:\n            return (j)\n        if target < nums[0]:\n            return (i)\n\n\n        while mid > i:\n            mid = int(i + (j-i)/2//1)\n            x = nums[mid]\n            if target > nums[mid]:\n                i = int(i + (j-i)/2//1)\n            elif target < nums[mid]:\n                j = int((j-i)/2//1)\n            elif nums[mid] == target:\n                return(mid)\n\n        return(i+1)",
        "compare_result": "1111101111111111111111111111111111111011011111111111111111111101",
        "title_slug": "search-insert-position",
        "has_notes": false
    },
    {
        "id": 689918136,
        "lang": "python",
        "lang_name": "Python",
        "time": "10\u00a0months, 1\u00a0week",
        "timestamp": 1651272828,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "33 ms",
        "url": "/submissions/detail/689918136/",
        "is_pending": "Not Pending",
        "title": "Find the Index of the First Occurrence in a String",
        "memory": "13.1 MB",
        "code": "class Solution(object):\n    def strStr(self, haystack, needle):\n        \"\"\"\n        :type haystack: str\n        :type needle: str\n        :rtype: int\n        \"\"\"\n        l = len(needle)\n        if len(haystack) == 0:\n            return 0\n        \n        for i in range(len(haystack)):\n            if haystack[i:i+l] == needle:\n                return i\n        \n        return -1",
        "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "find-the-index-of-the-first-occurrence-in-a-string",
        "has_notes": false
    },
    {
        "id": 688922871,
        "lang": "python",
        "lang_name": "Python",
        "time": "10\u00a0months, 1\u00a0week",
        "timestamp": 1651122868,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "20 ms",
        "url": "/submissions/detail/688922871/",
        "is_pending": "Not Pending",
        "title": "Remove Element",
        "memory": "13.5 MB",
        "code": "class Solution(object):\n    def removeElement(self, nums, val):\n        \"\"\"\n        :type nums: List[int]\n        :type val: int\n        :rtype: int\n        \"\"\"\n        k = 0\n        \n        for i in range(len(nums)):\n            if nums[k] == val:\n                nums.pop(k)\n            else:\n                k += 1\n        \n        return k\n            ",
        "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "remove-element",
        "has_notes": false
    },
    {
        "id": 687040582,
        "lang": "python",
        "lang_name": "Python",
        "time": "10\u00a0months, 2\u00a0weeks",
        "timestamp": 1650862759,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "41 ms",
        "url": "/submissions/detail/687040582/",
        "is_pending": "Not Pending",
        "title": "Valid Parentheses",
        "memory": "13.7 MB",
        "code": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        val = \"\"\n        \n        if len(s)%2 !=0:\n            return False\n        \n        for i in range(len(s)):\n            if s[i] == '(' or s[i] == '{' or s[i] == '[':\n                val += s[i]\n                continue\n            if not val:\n                return False\n            elif s[i] == ')' and val[-1] == '(':\n                val = val[:-1]\n                continue\n            elif s[i] == ']' and val[-1] == '[':\n                val = val[:-1]\n                continue\n            elif s[i] == '}' and val[-1] == '{':\n                val = val[:-1]\n                continue\n            else:\n                return False\n        if not val:\n            return True\n        return False",
        "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "valid-parentheses",
        "has_notes": false
    },
    {
        "id": 687040115,
        "lang": "python",
        "lang_name": "Python",
        "time": "10\u00a0months, 2\u00a0weeks",
        "timestamp": 1650862700,
        "status": 15,
        "status_display": "Runtime Error",
        "runtime": "N/A",
        "url": "/submissions/detail/687040115/",
        "is_pending": "Not Pending",
        "title": "Valid Parentheses",
        "memory": "N/A",
        "code": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        val = \"\"\n        \n        if len(s)%2 !=0:\n            return False\n        \n        for i in range(len(s)):\n            if s[i] == '(' or s[i] == '{' or s[i] == '[':\n                val += s[i]\n                continue\n            elif s[i] == ')' and val[-1] == '(':\n                val = val[:-1]\n                continue\n            elif s[i] == ']' and val[-1] == '[':\n                val = val[:-1]\n                continue\n            elif s[i] == '}' and val[-1] == '{':\n                val = val[:-1]\n                continue\n            else:\n                return False\n        if not val:\n            return True\n        return False",
        "compare_result": "1111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "title_slug": "valid-parentheses",
        "has_notes": false
    },
    {
        "id": 687039298,
        "lang": "python",
        "lang_name": "Python",
        "time": "10\u00a0months, 2\u00a0weeks",
        "timestamp": 1650862596,
        "status": 15,
        "status_display": "Runtime Error",
        "runtime": "N/A",
        "url": "/submissions/detail/687039298/",
        "is_pending": "Not Pending",
        "title": "Valid Parentheses",
        "memory": "N/A",
        "code": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        val = \"\"\n        \n        if len(s)%2 !=0:\n            return False\n        \n        for i in range(len(s)):\n            if s[i] == '(' or s[i] == '{' or s[i] == '[':\n                val += s[i]\n                continue\n            elif s[i] == ')' and val[-1] == '(':\n                val = val[:-1]\n                continue\n            elif s[i] == ']' and val[-1] == '[':\n                val = val[:-1]\n                continue\n            elif s[i] == '}' and val[-1] == '{':\n                val = val[:-1]\n                continue\n        if not val:\n            return True\n        return False",
        "compare_result": "1111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "title_slug": "valid-parentheses",
        "has_notes": false
    },
    {
        "id": 687038060,
        "lang": "python",
        "lang_name": "Python",
        "time": "10\u00a0months, 2\u00a0weeks",
        "timestamp": 1650862427,
        "status": 15,
        "status_display": "Runtime Error",
        "runtime": "N/A",
        "url": "/submissions/detail/687038060/",
        "is_pending": "Not Pending",
        "title": "Valid Parentheses",
        "memory": "N/A",
        "code": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        val = \"\"\n        \n        \n        for i in range(len(s)):\n            if s[i] == '(' or s[i] == '{' or s[i] == '[':\n                val += s[i]\n                continue\n            elif s[i] == ')' and val[-1] == '(':\n                val = val[:-1]\n                continue\n            elif s[i] == ']' and val[-1] == '[':\n                val = val[:-1]\n                continue\n            elif s[i] == '}' and val[-1] == '{':\n                val = val[:-1]\n                continue\n        if not val:\n            return True\n        return False",
        "compare_result": "1111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "title_slug": "valid-parentheses",
        "has_notes": false
    },
    {
        "id": 687036899,
        "lang": "python",
        "lang_name": "Python",
        "time": "10\u00a0months, 2\u00a0weeks",
        "timestamp": 1650862284,
        "status": 11,
        "status_display": "Wrong Answer",
        "runtime": "N/A",
        "url": "/submissions/detail/687036899/",
        "is_pending": "Not Pending",
        "title": "Valid Parentheses",
        "memory": "N/A",
        "code": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        val = \"\"\n        \n        \n        for i in range(len(s)):\n            if s[i] == '(' or s[i] == '{' or s[i] == '[':\n                val += s[i]\n                continue\n            elif s[i] == ')' and val[-1] == '(':\n                val = val[:-1]\n                continue\n            elif s[i] == ']' and val[-1] == '[':\n                val = val[:-1]\n                continue\n            elif s[i] == '}' and val[-1] == '{':\n                val = val[:-1]\n                continue\n            return False\n        return True",
        "compare_result": "1111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "title_slug": "valid-parentheses",
        "has_notes": false
    },
    {
        "id": 686959202,
        "lang": "python",
        "lang_name": "Python",
        "time": "10\u00a0months, 2\u00a0weeks",
        "timestamp": 1650851922,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "36 ms",
        "url": "/submissions/detail/686959202/",
        "is_pending": "Not Pending",
        "title": "Merge Two Sorted Lists",
        "memory": "13.6 MB",
        "code": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeTwoLists(self, list1, list2):\n        \"\"\"\n        :type list1: Optional[ListNode]\n        :type list2: Optional[ListNode]\n        :rtype: Optional[ListNode]\n        \"\"\"\n        new = ListNode()\n        \n        if not list1 and not list2:\n            return None\n        elif not list1:\n            return list2\n        elif not list2:\n            return list1\n            \n        \n        if list1.val > list2.val:\n            new = ListNode(list2.val)\n            list2 = list2.next\n        else:\n            new = ListNode(list1.val)\n            list1 = list1.next\n\n        temp = new\n        while list1 or list2:\n            if list1 and list2:\n                if list1.val >= list2.val: \n                    temp.next = ListNode(list2.val)\n                    list2 = list2.next\n                    temp = temp.next\n                elif list1.val < list2.val:\n                    temp.next = ListNode(list1.val)\n                    list1 = list1.next\n                    temp = temp.next\n            else:\n                if list2:\n                    temp.next = ListNode(list2.val)\n                    list2 = list2.next\n                    temp = temp.next\n                elif list1:\n                    temp.next = ListNode(list1.val)\n                    list1 = list1.next\n                    temp = temp.next\n        return new",
        "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "merge-two-sorted-lists",
        "has_notes": false
    },
    {
        "id": 686910218,
        "lang": "python",
        "lang_name": "Python",
        "time": "10\u00a0months, 2\u00a0weeks",
        "timestamp": 1650844635,
        "status": 11,
        "status_display": "Wrong Answer",
        "runtime": "N/A",
        "url": "/submissions/detail/686910218/",
        "is_pending": "Not Pending",
        "title": "Valid Parentheses",
        "memory": "N/A",
        "code": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        val = \"\"\n        for i in range(len(s)):\n            if s[i] == '(' or s[i] == '{' or s[i] == '[':\n                val = s[i]\n                continue\n            if val == '(' and s[i] == ')':\n                continue\n            if val == '[' and s[i] == ']':\n                continue\n            if val == '{' and s[i] == '}':\n                continue\n            return False\n        return True",
        "compare_result": "1111001010101101110001110111011101011000011111110101111010110110110110110111101110111101110",
        "title_slug": "valid-parentheses",
        "has_notes": false
    },
    {
        "id": 686884206,
        "lang": "python",
        "lang_name": "Python",
        "time": "10\u00a0months, 2\u00a0weeks",
        "timestamp": 1650840487,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "73 ms",
        "url": "/submissions/detail/686884206/",
        "is_pending": "Not Pending",
        "title": "Longest Substring Without Repeating Characters",
        "memory": "13.5 MB",
        "code": "class Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        i = 0\n        j = 0\n        maxl = 0\n        temp=\"\"\n\n        while i +j +1 <=len(s):\n            x= s[j+i]\n            if s[j+i] not in temp:\n                temp += s[i+j] \n                if maxl < i+1:\n                    maxl = i+1\n                i += 1\n            else:\n                j +=1\n                temp = temp[1:]\n                i -=1\n\n\n        return maxl",
        "compare_result
        "title_slug": "longest-substring-without-repeating-characters",
        "has_notes": false
    },
    {
        "id": 686431063,
        "lang": "python",
        "lang_name": "Python",
        "time": "10\u00a0months, 2\u00a0weeks",
        "timestamp": 1650779735,
        "status": 11,
        "status_display": "Wrong Answer",
        "runtime": "N/A",
        "url": "/submissions/detail/686431063/",
        "is_pending": "Not Pending",
        "title": "Longest Substring Without Repeating Characters",
        "memory": "N/A",
        "code": "class Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        s2 = s\n\n        slen = len(s)\n        ls = 0\n        maxls = 0\n        temp = \"\"\n        j = 0\n\n        for i in s2:\n            if i not in temp:\n                temp += i\n                ls +=1\n                if ls> maxls:\n                    maxls = ls\n            else:\n                j += 1\n                s2 = s2[j:]\n                ls = 0\n                temp = \"\"\n        return maxls",
        "compare_result
        "title_slug": "longest-substring-without-repeating-characters",
        "has_notes": false
    },
    {
        "id": 686355908,
        "lang": "python",
        "lang_name": "Python",
        "time": "10\u00a0months, 2\u00a0weeks",
        "timestamp": 1650771261,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "99 ms",
        "url": "/submissions/detail/686355908/",
        "is_pending": "Not Pending",
        "title": "Add Two Numbers",
        "memory": "13.4 MB",
        "code": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        multiplier = 1\n        num1 = 0\n        num2 = 0\n        num3 = 0\n        \n        while l1 or l2:\n            if l1:\n                num1 += l1.val*multiplier\n                l1= l1.next\n            if l2:\n                num2 += l2.val*multiplier\n                l2= l2.next\n            multiplier *= 10\n        \n        multiplier = 10\n        num3 +=  num1+num2\n        \n        head = ListNode(num3%multiplier)\n        temp = head\n        num3 = (num3-num3%multiplier)//multiplier\n        \n        while num3>0:\n            temp.next = ListNode(num3%multiplier)\n            temp = temp.next\n            num3 = (num3-num3%multiplier)//multiplier\n        \n        return head\n            \n            \n            ",
        "compare_result
        "title_slug": "add-two-numbers",
        "has_notes": false
    },
    {
        "id": 675386917,
        "lang": "mysql",
        "lang_name": "MySQL",
        "time": "11\u00a0months",
        "timestamp": 1649295359,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "1404 ms",
        "url": "/submissions/detail/675386917/",
        "is_pending": "Not Pending",
        "title": "Customer Who Visited but Did Not Make Any Transactions",
        "memory": "0B",
        "code": "# Write your MySQL query statement below\nselect Visits.customer_id , count(*) as count_no_trans \nfrom visits \nleft join Transactions on Visits.visit_id=Transactions.visit_id\nwhere Transactions.visit_id is null\ngroup by Visits.customer_id\n",
        "compare_result": "1111111111111111111111111111",
        "title_slug": "customer-who-visited-but-did-not-make-any-transactions",
        "has_notes": false
    },
    {
        "id": 675374491,
        "lang": "mysql",
        "lang_name": "MySQL",
        "time": "11\u00a0months",
        "timestamp": 1649293646,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "679 ms",
        "url": "/submissions/detail/675374491/",
        "is_pending": "Not Pending",
        "title": "Bank Account Summary II",
        "memory": "0B",
        "code": "# Write your MySQL query statement below\nselect Users.name AS NAME, sum(Transactions.amount) as BALANCE\nfrom Users\nJoin Transactions on Users.account = Transactions.account\ngroup by Users.name\nhaving sum(Transactions.amount)>10000\n",
        "compare_result": "1111111111111111",
        "title_slug": "bank-account-summary-ii",
        "has_notes": false
    },
    {
        "id": 674715235,
        "lang": "mysql",
        "lang_name": "MySQL",
        "time": "11\u00a0months",
        "timestamp": 1649209533,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "584 ms",
        "url": "/submissions/detail/674715235/",
        "is_pending": "Not Pending",
        "title": "Capital Gain/Loss",
        "memory": "0B",
        "code": "# Write your MySQL query statement below\nselect stock_name, sum(if(Operation='Sell',price,price*-1)) as capital_gain_loss \nfrom Stocks\ngroup by stock_name\n",
        "compare_result": "11111111111111111",
        "title_slug": "capital-gainloss",
        "has_notes": false
    },
    {
        "id": 674713333,
        "lang": "mysql",
        "lang_name": "MySQL",
        "time": "11\u00a0months",
        "timestamp": 1649209284,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "416 ms",
        "url": "/submissions/detail/674713333/",
        "is_pending": "Not Pending",
        "title": "Capital Gain/Loss",
        "memory": "0B",
        "code": "# Write your MySQL query statement below\nselect stock_name, sum(if(Operation='Sell',price,0)-if(Operation='Buy',price,0)) as capital_gain_loss \nfrom Stocks\ngroup by stock_name\n",
        "compare_result": "11111111111111111",
        "title_slug": "capital-gainloss",
        "has_notes": false
    },
    {
        "id": 674706177,
        "lang": "mysql",
        "lang_name": "MySQL",
        "time": "11\u00a0months",
        "timestamp": 1649208309,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "587 ms",
        "url": "/submissions/detail/674706177/",
        "is_pending": "Not Pending",
        "title": "Calculate Special Bonus",
        "memory": "0B",
        "code": "select employee_id, (if(employee_id % 2 != 0 and name not like 'M%', salary, 0)) as bonus\n    from Employees\n    order by employee_id;",
        "compare_result": "1111111111111111111111",
        "title_slug": "calculate-special-bonus",
        "has_notes": false
    },
    {
        "id": 674101656,
        "lang": "mysql",
        "lang_name": "MySQL",
        "time": "11\u00a0months",
        "timestamp": 1649132076,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "560 ms",
        "url": "/submissions/detail/674101656/",
        "is_pending": "Not Pending",
        "title": "Find Total Time Spent by Each Employee",
        "memory": "0B",
        "code": "# Write your MySQL query statement below\nselect event_day as day, emp_id, sum( out_time) - sum(in_time) as total_time \nfrom Employees\ngroup by event_day,emp_id",
        "compare_result": "1111111111111111111111",
        "title_slug": "find-total-time-spent-by-each-employee",
        "has_notes": false
    },
    {
        "id": 674093905,
        "lang": "mysql",
        "lang_name": "MySQL",
        "time": "11\u00a0months",
        "timestamp": 1649131265,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "668 ms",
        "url": "/submissions/detail/674093905/",
        "is_pending": "Not Pending",
        "title": "Daily Leads and Partners",
        "memory": "0B",
        "code": "# Write your MySQL query statement below\nselect date_id, make_name, count(distinct lead_id) as unique_leads , count(distinct partner_id) as unique_partners \nfrom DailySales\ngroup by date_id, make_name\n",
        "compare_result": "1111111111111111111111",
        "title_slug": "daily-leads-and-partners",
        "has_notes": false
    },
    {
        "id": 674082272,
        "lang": "mysql",
        "lang_name": "MySQL",
        "time": "11\u00a0months",
        "timestamp": 1649130042,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "510 ms",
        "url": "/submissions/detail/674082272/",
        "is_pending": "Not Pending",
        "title": "Recyclable and Low Fat Products",
        "memory": "0B",
        "code": "# Write your MySQL query statement below\nselect product_id\nfrom Products\nwhere low_fats='Y' and recyclable='Y';",
        "compare_result": "1111111111111111111111",
        "title_slug": "recyclable-and-low-fat-products",
        "has_notes": false
    },
    {
        "id": 672556290,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "11\u00a0months, 1\u00a0week",
        "timestamp": 1648942186,
        "status": 11,
        "status_display": "Wrong Answer",
        "runtime": "N/A",
        "url": "/submissions/detail/672556290/",
        "is_pending": "Not Pending",
        "title": "Valid Parentheses",
        "memory": "N/A",
        "code": "class Solution:\n    def isValid(self, s: str) -> bool:\n        \n        for i in range(len(s)//2):\n            ch = s[i*2]\n            if s[i*2] == '(' and s[i*2+1] == ')':\n                continue\n            if s[i*2] == '{' and s[i*2+1] == '}':\n                continue\n            if s[i*2] == '[' and s[i*2+1] == ']':\n                continue\n            else:\n                return False\n        return True",
        "compare_result": "1111000111111111111101100111111111011000010111110101111010110110110110110111101110111101110",
        "title_slug": "valid-parentheses",
        "has_notes": false
    },
    {
        "id": 672552414,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "11\u00a0months, 1\u00a0week",
        "timestamp": 1648941542,
        "status": 14,
        "status_display": "Time Limit Exceeded",
        "runtime": "N/A",
        "url": "/submissions/detail/672552414/",
        "is_pending": "Not Pending",
        "title": "Valid Palindrome II",
        "memory": "N/A",
        "code": "class Solution:\n    def validPalindrome(self, s: str) -> bool:\n        \n        new_s = s\n        \n        if s[:len(s)//2] == s[-(-len(s)//2):][::-1]:\n            return True\n        else:\n            for i in range(len(s)):\n                new_s = s[:i] + s[i+1:] \n                if new_s[:len(new_s)//2] == new_s[-(-len(new_s)//2):][::-1]:\n                    return True\n        return False\n                ",
        "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000",
        "title_slug": "valid-palindrome-ii",
        "has_notes": false
    },
    {
        "id": 672548936,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "11\u00a0months, 1\u00a0week",
        "timestamp": 1648940950,
        "status": 11,
        "status_display": "Wrong Answer",
        "runtime": "N/A",
        "url": "/submissions/detail/672548936/",
        "is_pending": "Not Pending",
        "title": "Valid Palindrome II",
        "memory": "N/A",
        "code": "class Solution:\n    def validPalindrome(self, s: str) -> bool:\n        \n        new_s = \"\"\n        \n        if s[:len(s)//2] != s[-(-len(s)//2):][::-1]:\n            for i in range(len(s)//2):\n                if s[i] != s[-1-i]:\n                    new_s = s[:i] + s[i+1:]\n                    if new_s[:len(new_s)//2] != new_s[-(-len(new_s)//2):][::-1]: \n                        return False \n        return True",
        "compare_result": "11111111001100001111100100111100100111111001111100000011100001111100001111100001111100001111100001111100001111100001111100001111100001111100001111100001111100001111100001111100000111100001111100001111100001111100001111100001111100001111100001111100001111100001111100001111100001111100001111100001111100001111100001111100001111100001111100001111100001111100001111100001111100001111100001111100001111100001111100001111100001111100001111100001111100001111100000001010111",
        "title_slug": "valid-palindrome-ii",
        "has_notes": false
    },
    {
        "id": 672548379,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "11\u00a0months, 1\u00a0week",
        "timestamp": 1648940862,
        "status": 11,
        "status_display": "Wrong Answer",
        "runtime": "N/A",
        "url": "/submissions/detail/672548379/",
        "is_pending": "Not Pending",
        "title": "Valid Palindrome II",
        "memory": "N/A",
        "code": "class Solution:\n    def validPalindrome(self, s: str) -> bool:\n        \n        new_s = \"\"\n        \n        if s[:len(s)//2] != s[-(-len(s)//2):][::-1]:\n            for i in range(len(s)//2):\n                if s[i] != s[-1-i]:\n                    new_s = s[:i] + s[i+1:]\n                    if new_s[:len(new_s)//2] != new_s[-(-len(s)//2):][::-1]: \n                        return False \n        return True",
        "compare_result": "11111110001100001111100000111100000111100001111100000011100001111100001111100001111100001111100001111100001111100001111100001111100001111100001111100001111100001111100001111100000111100001111100001111100001111100001111100001111100001111100001111100001111100001111100001111100001111100001111100001111100001111100001111100001111100001111100001111100001111100001111100001111100001111100001111100001111100001111100001111100001111100001111100001111100001111100000001010111",
        "title_slug": "valid-palindrome-ii",
        "has_notes": false
    },
    {
        "id": 671884448,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "11\u00a0months, 1\u00a0week",
        "timestamp": 1648855093,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "46 ms",
        "url": "/submissions/detail/671884448/",
        "is_pending": "Not Pending",
        "title": "Longest Common Prefix",
        "memory": "14 MB",
        "code": "class Solution:\n    def longestCommonPrefix(self, strs: List[str]) -> str:\n        \n        prefix = strs[0]\n        \n        for word in strs[1:]:\n            while(word[:len(prefix)] != prefix and prefix != \"\"):\n                prefix = prefix[:-1]\n        \n        return prefix",
        "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "longest-common-prefix",
        "has_notes": false
    },
    {
        "id": 671878693,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "11\u00a0months, 1\u00a0week",
        "timestamp": 1648853882,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "337 ms",
        "url": "/submissions/detail/671878693/",
        "is_pending": "Not Pending",
        "title": "Reverse String",
        "memory": "18.4 MB",
        "code": "class Solution:\n    def reverseString(self, s: List[str]) -> None:\n        \"\"\"\n        Do not return anything, modify s in-place instead.\n        \"\"\"\n        for i in range(len(s)//2):\n            temp = s[i]\n            s[i] = s[-1-i]\n            s[-1-i] = temp\n        \n        return s",
        "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "reverse-string",
        "has_notes": false
    },
    {
        "id": 671319244,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "11\u00a0months, 1\u00a0week",
        "timestamp": 1648777195,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "48 ms",
        "url": "/submissions/detail/671319244/",
        "is_pending": "Not Pending",
        "title": "Roman to Integer",
        "memory": "13.8 MB",
        "code": "class Solution:\n    def romanToInt(self, s: str) -> int:\n        \n        total = 0\n        D = {\"I\":1,\"V\":5,\"X\":10,\"L\":50,\"C\":100,\"D\":500,\"M\":1000}\n        Roman_letters = \"MDCLXVI\"\n        \n        for i in range(len(s)-1):\n            if Roman_letters.find(s[i]) <= Roman_letters.find(s[i+1]):\n                total += D.get(s[i])\n            else:\n                total -= D.get(s[i])\n        total += D.get(s[-1])\n        \n        return total",
        "compare_result
        "title_slug": "roman-to-integer",
        "has_notes": false
    },
    {
        "id": 671319024,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "11\u00a0months, 1\u00a0week",
        "timestamp": 1648777161,
        "status": 15,
        "status_display": "Runtime Error",
        "runtime": "N/A",
        "url": "/submissions/detail/671319024/",
        "is_pending": "Not Pending",
        "title": "Roman to Integer",
        "memory": "N/A",
        "code": "class Solution:\n    def romanToInt(self, s: str) -> int:\n        \n        total = 0\n        D = {\"I\":1,\"V\":5,\"X\":10,\"L\":50,\"C\":100,\"D\":500,\"M\":1000}\n        Roman_letters = \"MDCLXVI\"\n        \n        for i in range(len(s)-1):\n            if Roman_letters.find(s[i]) <= Roman_letters.find(s[i+1]):\n                total += D.get(s[i])\n            else:\n                total -= D.get(s[i])\n        total += D.get(s[i+1])\n        \n        return total",
        "compare_result
        "title_slug": "roman-to-integer",
        "has_notes": false
    },
    {
        "id": 671310865,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "11\u00a0months, 1\u00a0week",
        "timestamp": 1648775908,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "48 ms",
        "url": "/submissions/detail/671310865/",
        "is_pending": "Not Pending",
        "title": "Palindrome Number",
        "memory": "13.8 MB",
        "code": "class Solution:\n    def isPalindrome(self, x: int) -> bool:\n        \n        y = [i for i in str(x)]\n        \n        if len(y) == 1:\n            return True\n        \n        for j in range(len(y)//2):\n            if y[j] != y[-j-1]:\n                return False\n        \n        return True",
        "compare_result
        "title_slug": "palindrome-number",
        "has_notes": false
    },
    {
        "id": 671308982,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "11\u00a0months, 1\u00a0week",
        "timestamp": 1648775619,
        "status": 11,
        "status_display": "Wrong Answer",
        "runtime": "N/A",
        "url": "/submissions/detail/671308982/",
        "is_pending": "Not Pending",
        "title": "Palindrome Number",
        "memory": "N/A",
        "code": "class Solution:\n    def isPalindrome(self, x: int) -> bool:\n        \n        y = [i for i in str(x)]\n        \n        if len(y) == 1:\n            return True\n        \n        for j in range(len(y)//2):\n            if y[j] == y[-j-1]:\n                return True\n        \n        return False",
        "compare_result
        "title_slug": "palindrome-number",
        "has_notes": false
    },
    {
        "id": 671307574,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "11\u00a0months, 1\u00a0week",
        "timestamp": 1648775397,
        "status": 11,
        "status_display": "Wrong Answer",
        "runtime": "N/A",
        "url": "/submissions/detail/671307574/",
        "is_pending": "Not Pending",
        "title": "Palindrome Number",
        "memory": "N/A",
        "code": "class Solution:\n    def isPalindrome(self, x: int) -> bool:\n        \n        y = [i for i in str(x)]\n        \n        for j in range(len(y)//2):\n            if y[j] == y[-j-1]:\n                return True\n        \n        return False",
        "compare_result
        "title_slug": "palindrome-number",
        "has_notes": false
    },
    {
        "id": 670656687,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "11\u00a0months, 1\u00a0week",
        "timestamp": 1648683830,
        "status": 14,
        "status_display": "Time Limit Exceeded",
        "runtime": "N/A",
        "url": "/submissions/detail/670656687/",
        "is_pending": "Not Pending",
        "title": "Find the Duplicate Number",
        "memory": "N/A",
        "code": "class Solution:\n    def findDuplicate(self, nums: List[int]) -> int:\n        \n        for i in range(len(nums)):\n            if nums[i] in nums[i+1:]:\n                return nums[i]",
        "compare_result": "1111111111111111111111111111111111111111111111111111100000",
        "title_slug": "find-the-duplicate-number",
        "has_notes": false
    },
    {
        "id": 670651233,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "11\u00a0months, 1\u00a0week",
        "timestamp": 1648682818,
        "status": 11,
        "status_display": "Wrong Answer",
        "runtime": "N/A",
        "url": "/submissions/detail/670651233/",
        "is_pending": "Not Pending",
        "title": "Two Sum",
        "memory": "N/A",
        "code": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        \n        for i in range(len(nums)):\n            possible_second = target - nums[i]\n            if possible_second in nums[i+1:] and index(possible_second)!= i:\n                return [i,nums.index(possible_second)]",
        "compare_result": "110000111011111011101111111111111111111111111111111101111",
        "title_slug": "two-sum",
        "has_notes": false
    },
    {
        "id": 670651022,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "11\u00a0months, 1\u00a0week",
        "timestamp": 1648682777,
        "status": 11,
        "status_display": "Wrong Answer",
        "runtime": "N/A",
        "url": "/submissions/detail/670651022/",
        "is_pending": "Not Pending",
        "title": "Two Sum",
        "memory": "N/A",
        "code": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        \n        for i in range(len(nums)):\n            possible_second = target - nums[i]\n            if possible_second in nums[i+1:]:\n                return [i,nums.index(possible_second)]",
        "compare_result": "110000111011111111101111111111111111111111111111111101111",
        "title_slug": "two-sum",
        "has_notes": false
    },
    {
        "id": 670648213,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "11\u00a0months, 1\u00a0week",
        "timestamp": 1648682274,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "696 ms",
        "url": "/submissions/detail/670648213/",
        "is_pending": "Not Pending",
        "title": "Two Sum",
        "memory": "14.9 MB",
        "code": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        \n        for i in range(len(nums)):\n            possible_second = target - nums[i]\n            if possible_second in nums[i+1:]:\n                for j in range(len(nums[i+1:])):\n                    if nums[i+1:][j] == possible_second:\n                        return [i,j+i+1]",
        "compare_result": "111111111111111111111111111111111111111111111111111111111",
        "title_slug": "two-sum",
        "has_notes": false
    },
    {
        "id": 670643393,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "11\u00a0months, 1\u00a0week",
        "timestamp": 1648681401,
        "status": 14,
        "status_display": "Time Limit Exceeded",
        "runtime": "N/A",
        "url": "/submissions/detail/670643393/",
        "is_pending": "Not Pending",
        "title": "Two Sum",
        "memory": "N/A",
        "code": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        \n        for i in range(len(nums)):\n            possible_second = target - nums[i]\n            for j in range(len(nums[i+1:])):\n                if nums[i+1:][j] == possible_second:\n                    return [i,j+i+1]",
        "compare_result": "111111111111111111111111111111111111111111111111111111100",
        "title_slug": "two-sum",
        "has_notes": false
    },
    {
        "id": 670635804,
        "lang": "python",
        "lang_name": "Python",
        "time": "11\u00a0months, 1\u00a0week",
        "timestamp": 1648680100,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "108 ms",
        "url": "/submissions/detail/670635804/",
        "is_pending": "Not Pending",
        "title": "Build Array from Permutation",
        "memory": "14 MB",
        "code": "class Solution(object):\n    def buildArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        ans = [nums[nums[i]] for i in range(len(nums))]\n        return ans",
        "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "build-array-from-permutation",
        "has_notes": false
    },
    {
        "id": 670020375,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "11\u00a0months, 1\u00a0week",
        "timestamp": 1648603831,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "44 ms",
        "url": "/submissions/detail/670020375/",
        "is_pending": "Not Pending",
        "title": "Search a 2D Matrix",
        "memory": "14.5 MB",
        "code": "class Solution:\n    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:\n        First_column = [row[0] for row in matrix]\n        \n        i = 0\n        for i in range(len(First_column)):\n            if First_column[i] > target:\n                i-=1\n                break\n\n        for value in matrix[i]:\n            if value == target:\n                return True\n\n        return False",
        "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "search-a-2d-matrix",
        "has_notes": false
    },
    {
        "id": 670012117,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "11\u00a0months, 1\u00a0week",
        "timestamp": 1648602739,
        "status": 11,
        "status_display": "Wrong Answer",
        "runtime": "N/A",
        "url": "/submissions/detail/670012117/",
        "is_pending": "Not Pending",
        "title": "Search a 2D Matrix",
        "memory": "N/A",
        "code": "class Solution:\n    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:\n        First_column = [row[0] for row in matrix]\n        \n        i = 0\n        for i in range(len(First_column)-1):\n            if First_column[i] > target:\n                i-=1\n\n        for value in matrix[i]:\n            if value == target:\n                return True\n\n        return False",
        "compare_result": "1111111111111111011111111111110111011110111111111111111010101011111111111111111111111111111111011101111101110101110101100101111101111",
        "title_slug": "search-a-2d-matrix",
        "has_notes": false
    },
    {
        "id": 670011489,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "11\u00a0months, 1\u00a0week",
        "timestamp": 1648602651,
        "status": 11,
        "status_display": "Wrong Answer",
        "runtime": "N/A",
        "url": "/submissions/detail/670011489/",
        "is_pending": "Not Pending",
        "title": "Search a 2D Matrix",
        "memory": "N/A",
        "code": "class Solution:\n    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:\n        First_column = [row[0] for row in matrix]\n        \n        i = 0\n        for i in range(len(First_column)-1):\n            if First_column[i] > target:\n                i-=1\n\n        for j in range(len(matrix[i])-1):\n            if matrix[i][j] == target:\n                return True\n\n        return False",
        "compare_result": "1110111111101101011111101101010111011110111111101111101010101011111111111111101111111111111111011101011101110101110101100101111101111",
        "title_slug": "search-a-2d-matrix",
        "has_notes": false
    },
    {
        "id": 670007539,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "11\u00a0months, 1\u00a0week",
        "timestamp": 1648602101,
        "status": 15,
        "status_display": "Runtime Error",
        "runtime": "N/A",
        "url": "/submissions/detail/670007539/",
        "is_pending": "Not Pending",
        "title": "Search a 2D Matrix",
        "memory": "N/A",
        "code": "class Solution:\n    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:\n        First_column = [row[0] for row in matrix]\n        \n        \n        for i in range(len(First_column)-1):\n            if First_column[i] > target:\n                i-=1\n\n        for j in range(len(matrix[i])-1):\n            if matrix[i][j] == target:\n                return True\n\n        return False",
        "compare_result": "1100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "title_slug": "search-a-2d-matrix",
        "has_notes": false
    },
    {
        "id": 670006920,
        "lang": "python3",
        "lang_name": "Python3",
        "time": "11\u00a0months, 1\u00a0week",
        "timestamp": 1648602012,
        "status": 15,
        "status_display": "Runtime Error",
        "runtime": "N/A",
        "url": "/submissions/detail/670006920/",
        "is_pending": "Not Pending",
        "title": "Search a 2D Matrix",
        "memory": "N/A",
        "code": "class Solution:\n    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:\n        First_column = [row[0] for row in matrix]\n        \n        \n        for i in range(len(First_column)-1):\n            if First_column[i] > target:\n                i-=1\n\n        for j in matrix[i]:\n            if matrix[i][j] == target:\n                return True\n\n        return False",
        "compare_result": "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "title_slug": "search-a-2d-matrix",
        "has_notes": false
    },
    {
        "id": 669155339,
        "lang": "python",
        "lang_name": "Python",
        "time": "11\u00a0months, 1\u00a0week",
        "timestamp": 1648493776,
        "status": 10,
        "status_display": "Accepted",
        "runtime": "85 ms",
        "url": "/submissions/detail/669155339/",
        "is_pending": "Not Pending",
        "title": "Concatenation of Array",
        "memory": "13.9 MB",
        "code": "class Solution(object):\n    def getConcatenation(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        ans = nums + nums\n        return ans",
        "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "title_slug": "concatenation-of-array",
        "has_notes": false
    }
]